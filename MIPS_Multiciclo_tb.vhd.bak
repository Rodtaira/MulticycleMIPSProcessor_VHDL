-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "11/28/2015 14:05:46"
                                                            
-- Vhdl Test Bench template for design  :  MIPS_Multiciclo
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;                                

ENTITY MIPS_Multiciclo_vhd_tst IS
END MIPS_Multiciclo_vhd_tst;
ARCHITECTURE MIPS_Multiciclo_arch OF MIPS_Multiciclo_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL address : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL clk : STD_LOGIC;
SIGNAL instruction : STD_LOGIC_VECTOR(31 DOWNTO 0);
SIGNAL RD_teste : STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL reset : STD_LOGIC;
SIGNAL RS_teste : STD_LOGIC_VECTOR(4 DOWNTO 0);
SIGNAL RT_teste : STD_LOGIC_VECTOR(4 DOWNTO 0);
COMPONENT MIPS_Multiciclo
	PORT (
	address : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	clk : IN STD_LOGIC;
	instruction : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
	RD_teste : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
	reset : IN STD_LOGIC;
	RS_teste : OUT STD_LOGIC_VECTOR(4 DOWNTO 0);
	RT_teste : OUT STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;
BEGIN
	i1 : MIPS_Multiciclo
	PORT MAP (
-- list connections between master ports and signals
	address => address,
	clk => clk,
	instruction => instruction,
	RD_teste => RD_teste,
	reset => reset,
	RS_teste => RS_teste,
	RT_teste => RT_teste
	);
init : PROCESS (clk)   

                                        
-- variable declarations                                     
BEGIN

clk <= '0' ;
clk <= not(clk) after 0.2 ns;   
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns; 
clk <= not(clk) after 0.2 ns;   
clk <= not(clk) after 0.2 ns;  
clk <= not(clk) after 0.2 ns;  
clk <= not(clk) after 0.2 ns;  
clk <= not(clk) after 0.2 ns;  
clk <= not(clk) after 0.2 ns;                                                           
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
                                      
END MIPS_Multiciclo_arch;
