// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/14/2015 22:02:29"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MIPS_Multiciclo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MIPS_Multiciclo_vlg_sample_tst(
	clk,
	reset,
	sampler_tx
);
input  clk;
input  reset;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MIPS_Multiciclo_vlg_check_tst (
	A_teste,
	address,
	B_teste,
	datA_Write2_teste,
	EnablePC_teste,
	Endereco_MEM_teste,
	EscreveReg_teste,
	imm,
	instruction,
	is_bgez_teste,
	louD_teste,
	MemparaReg_teste,
	op_alu_test,
	OrigBAlu_teste,
	RD_teste,
	RDM_out_teste,
	REg_Write3_5,
	Reg_Write3_teste,
	regDST_test,
	RS_teste,
	RT_teste,
	saida_alu_teste,
	sampler_rx
);
input [31:0] A_teste;
input [31:0] address;
input [31:0] B_teste;
input [31:0] datA_Write2_teste;
input  EnablePC_teste;
input [31:0] Endereco_MEM_teste;
input  EscreveReg_teste;
input [15:0] imm;
input [31:0] instruction;
input  is_bgez_teste;
input  louD_teste;
input  MemparaReg_teste;
input [3:0] op_alu_test;
input [1:0] OrigBAlu_teste;
input [4:0] RD_teste;
input [31:0] RDM_out_teste;
input [4:0] REg_Write3_5;
input [31:0] Reg_Write3_teste;
input  regDST_test;
input [4:0] RS_teste;
input [4:0] RT_teste;
input [31:0] saida_alu_teste;
input sampler_rx;

reg [31:0] A_teste_expected;
reg [31:0] address_expected;
reg [31:0] B_teste_expected;
reg [31:0] datA_Write2_teste_expected;
reg  EnablePC_teste_expected;
reg [31:0] Endereco_MEM_teste_expected;
reg  EscreveReg_teste_expected;
reg [15:0] imm_expected;
reg [31:0] instruction_expected;
reg  is_bgez_teste_expected;
reg  louD_teste_expected;
reg  MemparaReg_teste_expected;
reg [3:0] op_alu_test_expected;
reg [1:0] OrigBAlu_teste_expected;
reg [4:0] RD_teste_expected;
reg [31:0] RDM_out_teste_expected;
reg [4:0] REg_Write3_5_expected;
reg [31:0] Reg_Write3_teste_expected;
reg  regDST_test_expected;
reg [4:0] RS_teste_expected;
reg [4:0] RT_teste_expected;
reg [31:0] saida_alu_teste_expected;

reg [31:0] A_teste_prev;
reg [31:0] address_prev;
reg [31:0] B_teste_prev;
reg [31:0] datA_Write2_teste_prev;
reg  EnablePC_teste_prev;
reg [31:0] Endereco_MEM_teste_prev;
reg  EscreveReg_teste_prev;
reg [15:0] imm_prev;
reg [31:0] instruction_prev;
reg  is_bgez_teste_prev;
reg  louD_teste_prev;
reg  MemparaReg_teste_prev;
reg [3:0] op_alu_test_prev;
reg [1:0] OrigBAlu_teste_prev;
reg [4:0] RD_teste_prev;
reg [31:0] RDM_out_teste_prev;
reg [4:0] REg_Write3_5_prev;
reg [31:0] Reg_Write3_teste_prev;
reg  regDST_test_prev;
reg [4:0] RS_teste_prev;
reg [4:0] RT_teste_prev;
reg [31:0] saida_alu_teste_prev;

reg [31:0] A_teste_expected_prev;
reg [31:0] address_expected_prev;
reg [31:0] B_teste_expected_prev;
reg [31:0] datA_Write2_teste_expected_prev;
reg  EnablePC_teste_expected_prev;
reg [31:0] Endereco_MEM_teste_expected_prev;
reg  EscreveReg_teste_expected_prev;
reg [15:0] imm_expected_prev;
reg [31:0] instruction_expected_prev;
reg  is_bgez_teste_expected_prev;
reg  louD_teste_expected_prev;
reg  MemparaReg_teste_expected_prev;
reg [3:0] op_alu_test_expected_prev;
reg [1:0] OrigBAlu_teste_expected_prev;
reg [4:0] RD_teste_expected_prev;
reg [31:0] RDM_out_teste_expected_prev;
reg [4:0] REg_Write3_5_expected_prev;
reg [31:0] Reg_Write3_teste_expected_prev;
reg  regDST_test_expected_prev;
reg [4:0] RS_teste_expected_prev;
reg [4:0] RT_teste_expected_prev;
reg [31:0] saida_alu_teste_expected_prev;

reg [31:0] last_A_teste_exp;
reg [31:0] last_address_exp;
reg [31:0] last_B_teste_exp;
reg [31:0] last_datA_Write2_teste_exp;
reg  last_EnablePC_teste_exp;
reg [31:0] last_Endereco_MEM_teste_exp;
reg  last_EscreveReg_teste_exp;
reg [15:0] last_imm_exp;
reg [31:0] last_instruction_exp;
reg  last_is_bgez_teste_exp;
reg  last_louD_teste_exp;
reg  last_MemparaReg_teste_exp;
reg [3:0] last_op_alu_test_exp;
reg [1:0] last_OrigBAlu_teste_exp;
reg [4:0] last_RD_teste_exp;
reg [31:0] last_RDM_out_teste_exp;
reg [4:0] last_REg_Write3_5_exp;
reg [31:0] last_Reg_Write3_teste_exp;
reg  last_regDST_test_exp;
reg [4:0] last_RS_teste_exp;
reg [4:0] last_RT_teste_exp;
reg [31:0] last_saida_alu_teste_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:22] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 22'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_teste_prev = A_teste;
	address_prev = address;
	B_teste_prev = B_teste;
	datA_Write2_teste_prev = datA_Write2_teste;
	EnablePC_teste_prev = EnablePC_teste;
	Endereco_MEM_teste_prev = Endereco_MEM_teste;
	EscreveReg_teste_prev = EscreveReg_teste;
	imm_prev = imm;
	instruction_prev = instruction;
	is_bgez_teste_prev = is_bgez_teste;
	louD_teste_prev = louD_teste;
	MemparaReg_teste_prev = MemparaReg_teste;
	op_alu_test_prev = op_alu_test;
	OrigBAlu_teste_prev = OrigBAlu_teste;
	RD_teste_prev = RD_teste;
	RDM_out_teste_prev = RDM_out_teste;
	REg_Write3_5_prev = REg_Write3_5;
	Reg_Write3_teste_prev = Reg_Write3_teste;
	regDST_test_prev = regDST_test;
	RS_teste_prev = RS_teste;
	RT_teste_prev = RT_teste;
	saida_alu_teste_prev = saida_alu_teste;
end

// update expected /o prevs

always @(trigger)
begin
	A_teste_expected_prev = A_teste_expected;
	address_expected_prev = address_expected;
	B_teste_expected_prev = B_teste_expected;
	datA_Write2_teste_expected_prev = datA_Write2_teste_expected;
	EnablePC_teste_expected_prev = EnablePC_teste_expected;
	Endereco_MEM_teste_expected_prev = Endereco_MEM_teste_expected;
	EscreveReg_teste_expected_prev = EscreveReg_teste_expected;
	imm_expected_prev = imm_expected;
	instruction_expected_prev = instruction_expected;
	is_bgez_teste_expected_prev = is_bgez_teste_expected;
	louD_teste_expected_prev = louD_teste_expected;
	MemparaReg_teste_expected_prev = MemparaReg_teste_expected;
	op_alu_test_expected_prev = op_alu_test_expected;
	OrigBAlu_teste_expected_prev = OrigBAlu_teste_expected;
	RD_teste_expected_prev = RD_teste_expected;
	RDM_out_teste_expected_prev = RDM_out_teste_expected;
	REg_Write3_5_expected_prev = REg_Write3_5_expected;
	Reg_Write3_teste_expected_prev = Reg_Write3_teste_expected;
	regDST_test_expected_prev = regDST_test_expected;
	RS_teste_expected_prev = RS_teste_expected;
	RT_teste_expected_prev = RT_teste_expected;
	saida_alu_teste_expected_prev = saida_alu_teste_expected;
end


// expected address[ 31 ]
initial
begin
	address_expected[31] = 1'bX;
	address_expected[31] = #999000 1'b0;
end 
// expected address[ 30 ]
initial
begin
	address_expected[30] = 1'bX;
	address_expected[30] = #999000 1'b0;
end 
// expected address[ 29 ]
initial
begin
	address_expected[29] = 1'bX;
	address_expected[29] = #999000 1'b0;
end 
// expected address[ 28 ]
initial
begin
	address_expected[28] = 1'bX;
	address_expected[28] = #999000 1'b0;
end 
// expected address[ 27 ]
initial
begin
	address_expected[27] = 1'bX;
	address_expected[27] = #999000 1'b0;
end 
// expected address[ 26 ]
initial
begin
	address_expected[26] = 1'bX;
	address_expected[26] = #999000 1'b0;
end 
// expected address[ 25 ]
initial
begin
	address_expected[25] = 1'bX;
	address_expected[25] = #999000 1'b0;
end 
// expected address[ 24 ]
initial
begin
	address_expected[24] = 1'bX;
	address_expected[24] = #999000 1'b0;
end 
// expected address[ 23 ]
initial
begin
	address_expected[23] = 1'bX;
	address_expected[23] = #999000 1'b0;
end 
// expected address[ 22 ]
initial
begin
	address_expected[22] = 1'bX;
	address_expected[22] = #999000 1'b0;
end 
// expected address[ 21 ]
initial
begin
	address_expected[21] = 1'bX;
	address_expected[21] = #999000 1'b0;
end 
// expected address[ 20 ]
initial
begin
	address_expected[20] = 1'bX;
	address_expected[20] = #999000 1'b0;
end 
// expected address[ 19 ]
initial
begin
	address_expected[19] = 1'bX;
	address_expected[19] = #999000 1'b0;
end 
// expected address[ 18 ]
initial
begin
	address_expected[18] = 1'bX;
	address_expected[18] = #999000 1'b0;
end 
// expected address[ 17 ]
initial
begin
	address_expected[17] = 1'bX;
	address_expected[17] = #999000 1'b0;
end 
// expected address[ 16 ]
initial
begin
	address_expected[16] = 1'bX;
	address_expected[16] = #999000 1'b0;
end 
// expected address[ 15 ]
initial
begin
	address_expected[15] = 1'bX;
	address_expected[15] = #999000 1'b0;
end 
// expected address[ 14 ]
initial
begin
	address_expected[14] = 1'bX;
	address_expected[14] = #999000 1'b0;
end 
// expected address[ 13 ]
initial
begin
	address_expected[13] = 1'bX;
	address_expected[13] = #999000 1'b0;
end 
// expected address[ 12 ]
initial
begin
	address_expected[12] = 1'bX;
	address_expected[12] = #999000 1'b0;
end 
// expected address[ 11 ]
initial
begin
	address_expected[11] = 1'bX;
	address_expected[11] = #999000 1'b0;
end 
// expected address[ 10 ]
initial
begin
	address_expected[10] = 1'bX;
	address_expected[10] = #999000 1'b0;
end 
// expected address[ 9 ]
initial
begin
	address_expected[9] = 1'bX;
	address_expected[9] = #999000 1'b0;
end 
// expected address[ 8 ]
initial
begin
	address_expected[8] = 1'bX;
	address_expected[8] = #999000 1'b0;
end 
// expected address[ 7 ]
initial
begin
	address_expected[7] = 1'bX;
	address_expected[7] = #999000 1'b0;
end 
// expected address[ 6 ]
initial
begin
	address_expected[6] = 1'bX;
	address_expected[6] = #999000 1'b0;
end 
// expected address[ 5 ]
initial
begin
	address_expected[5] = 1'bX;
	address_expected[5] = #999000 1'b0;
end 
// expected address[ 4 ]
initial
begin
	address_expected[4] = 1'bX;
	address_expected[4] = #999000 1'b0;
end 
// expected address[ 3 ]
initial
begin
	address_expected[3] = 1'bX;
	address_expected[3] = #999000 1'b0;
end 
// expected address[ 2 ]
initial
begin
	address_expected[2] = 1'bX;
	address_expected[2] = #999000 1'b0;
end 
// expected address[ 1 ]
initial
begin
	address_expected[1] = 1'bX;
	address_expected[1] = #999000 1'b0;
end 
// expected address[ 0 ]
initial
begin
	address_expected[0] = 1'bX;
	address_expected[0] = #999000 1'b0;
end 
// expected Endereco_MEM_teste[ 31 ]
initial
begin
	Endereco_MEM_teste_expected[31] = 1'bX;
end 
// expected Endereco_MEM_teste[ 30 ]
initial
begin
	Endereco_MEM_teste_expected[30] = 1'bX;
end 
// expected Endereco_MEM_teste[ 29 ]
initial
begin
	Endereco_MEM_teste_expected[29] = 1'bX;
end 
// expected Endereco_MEM_teste[ 28 ]
initial
begin
	Endereco_MEM_teste_expected[28] = 1'bX;
end 
// expected Endereco_MEM_teste[ 27 ]
initial
begin
	Endereco_MEM_teste_expected[27] = 1'bX;
end 
// expected Endereco_MEM_teste[ 26 ]
initial
begin
	Endereco_MEM_teste_expected[26] = 1'bX;
end 
// expected Endereco_MEM_teste[ 25 ]
initial
begin
	Endereco_MEM_teste_expected[25] = 1'bX;
end 
// expected Endereco_MEM_teste[ 24 ]
initial
begin
	Endereco_MEM_teste_expected[24] = 1'bX;
end 
// expected Endereco_MEM_teste[ 23 ]
initial
begin
	Endereco_MEM_teste_expected[23] = 1'bX;
end 
// expected Endereco_MEM_teste[ 22 ]
initial
begin
	Endereco_MEM_teste_expected[22] = 1'bX;
end 
// expected Endereco_MEM_teste[ 21 ]
initial
begin
	Endereco_MEM_teste_expected[21] = 1'bX;
end 
// expected Endereco_MEM_teste[ 20 ]
initial
begin
	Endereco_MEM_teste_expected[20] = 1'bX;
end 
// expected Endereco_MEM_teste[ 19 ]
initial
begin
	Endereco_MEM_teste_expected[19] = 1'bX;
end 
// expected Endereco_MEM_teste[ 18 ]
initial
begin
	Endereco_MEM_teste_expected[18] = 1'bX;
end 
// expected Endereco_MEM_teste[ 17 ]
initial
begin
	Endereco_MEM_teste_expected[17] = 1'bX;
end 
// expected Endereco_MEM_teste[ 16 ]
initial
begin
	Endereco_MEM_teste_expected[16] = 1'bX;
end 
// expected Endereco_MEM_teste[ 15 ]
initial
begin
	Endereco_MEM_teste_expected[15] = 1'bX;
end 
// expected Endereco_MEM_teste[ 14 ]
initial
begin
	Endereco_MEM_teste_expected[14] = 1'bX;
end 
// expected Endereco_MEM_teste[ 13 ]
initial
begin
	Endereco_MEM_teste_expected[13] = 1'bX;
end 
// expected Endereco_MEM_teste[ 12 ]
initial
begin
	Endereco_MEM_teste_expected[12] = 1'bX;
end 
// expected Endereco_MEM_teste[ 11 ]
initial
begin
	Endereco_MEM_teste_expected[11] = 1'bX;
end 
// expected Endereco_MEM_teste[ 10 ]
initial
begin
	Endereco_MEM_teste_expected[10] = 1'bX;
end 
// expected Endereco_MEM_teste[ 9 ]
initial
begin
	Endereco_MEM_teste_expected[9] = 1'bX;
end 
// expected Endereco_MEM_teste[ 8 ]
initial
begin
	Endereco_MEM_teste_expected[8] = 1'bX;
end 
// expected Endereco_MEM_teste[ 7 ]
initial
begin
	Endereco_MEM_teste_expected[7] = 1'bX;
end 
// expected Endereco_MEM_teste[ 6 ]
initial
begin
	Endereco_MEM_teste_expected[6] = 1'bX;
end 
// expected Endereco_MEM_teste[ 5 ]
initial
begin
	Endereco_MEM_teste_expected[5] = 1'bX;
end 
// expected Endereco_MEM_teste[ 4 ]
initial
begin
	Endereco_MEM_teste_expected[4] = 1'bX;
end 
// expected Endereco_MEM_teste[ 3 ]
initial
begin
	Endereco_MEM_teste_expected[3] = 1'bX;
end 
// expected Endereco_MEM_teste[ 2 ]
initial
begin
	Endereco_MEM_teste_expected[2] = 1'bX;
end 
// expected Endereco_MEM_teste[ 1 ]
initial
begin
	Endereco_MEM_teste_expected[1] = 1'bX;
end 
// expected Endereco_MEM_teste[ 0 ]
initial
begin
	Endereco_MEM_teste_expected[0] = 1'bX;
end 
// expected instruction[ 31 ]
initial
begin
	instruction_expected[31] = 1'bX;
	instruction_expected[31] = #999000 1'b0;
end 
// expected instruction[ 30 ]
initial
begin
	instruction_expected[30] = 1'bX;
	instruction_expected[30] = #999000 1'b0;
end 
// expected instruction[ 29 ]
initial
begin
	instruction_expected[29] = 1'bX;
	instruction_expected[29] = #999000 1'b0;
end 
// expected instruction[ 28 ]
initial
begin
	instruction_expected[28] = 1'bX;
	instruction_expected[28] = #999000 1'b0;
end 
// expected instruction[ 27 ]
initial
begin
	instruction_expected[27] = 1'bX;
	instruction_expected[27] = #999000 1'b0;
end 
// expected instruction[ 26 ]
initial
begin
	instruction_expected[26] = 1'bX;
	instruction_expected[26] = #999000 1'b0;
end 
// expected instruction[ 25 ]
initial
begin
	instruction_expected[25] = 1'bX;
	instruction_expected[25] = #999000 1'b0;
end 
// expected instruction[ 24 ]
initial
begin
	instruction_expected[24] = 1'bX;
	instruction_expected[24] = #999000 1'b0;
end 
// expected instruction[ 23 ]
initial
begin
	instruction_expected[23] = 1'bX;
	instruction_expected[23] = #999000 1'b0;
end 
// expected instruction[ 22 ]
initial
begin
	instruction_expected[22] = 1'bX;
	instruction_expected[22] = #999000 1'b0;
end 
// expected instruction[ 21 ]
initial
begin
	instruction_expected[21] = 1'bX;
	instruction_expected[21] = #999000 1'b0;
end 
// expected instruction[ 20 ]
initial
begin
	instruction_expected[20] = 1'bX;
	instruction_expected[20] = #999000 1'b0;
end 
// expected instruction[ 19 ]
initial
begin
	instruction_expected[19] = 1'bX;
	instruction_expected[19] = #999000 1'b0;
end 
// expected instruction[ 18 ]
initial
begin
	instruction_expected[18] = 1'bX;
	instruction_expected[18] = #999000 1'b0;
end 
// expected instruction[ 17 ]
initial
begin
	instruction_expected[17] = 1'bX;
	instruction_expected[17] = #999000 1'b0;
end 
// expected instruction[ 16 ]
initial
begin
	instruction_expected[16] = 1'bX;
	instruction_expected[16] = #999000 1'b0;
end 
// expected instruction[ 15 ]
initial
begin
	instruction_expected[15] = 1'bX;
	instruction_expected[15] = #999000 1'b0;
end 
// expected instruction[ 14 ]
initial
begin
	instruction_expected[14] = 1'bX;
	instruction_expected[14] = #999000 1'b0;
end 
// expected instruction[ 13 ]
initial
begin
	instruction_expected[13] = 1'bX;
	instruction_expected[13] = #999000 1'b0;
end 
// expected instruction[ 12 ]
initial
begin
	instruction_expected[12] = 1'bX;
	instruction_expected[12] = #999000 1'b0;
end 
// expected instruction[ 11 ]
initial
begin
	instruction_expected[11] = 1'bX;
	instruction_expected[11] = #999000 1'b0;
end 
// expected instruction[ 10 ]
initial
begin
	instruction_expected[10] = 1'bX;
	instruction_expected[10] = #999000 1'b0;
end 
// expected instruction[ 9 ]
initial
begin
	instruction_expected[9] = 1'bX;
	instruction_expected[9] = #999000 1'b0;
end 
// expected instruction[ 8 ]
initial
begin
	instruction_expected[8] = 1'bX;
	instruction_expected[8] = #999000 1'b0;
end 
// expected instruction[ 7 ]
initial
begin
	instruction_expected[7] = 1'bX;
	instruction_expected[7] = #999000 1'b0;
end 
// expected instruction[ 6 ]
initial
begin
	instruction_expected[6] = 1'bX;
	instruction_expected[6] = #999000 1'b0;
end 
// expected instruction[ 5 ]
initial
begin
	instruction_expected[5] = 1'bX;
	instruction_expected[5] = #999000 1'b0;
end 
// expected instruction[ 4 ]
initial
begin
	instruction_expected[4] = 1'bX;
	instruction_expected[4] = #999000 1'b0;
end 
// expected instruction[ 3 ]
initial
begin
	instruction_expected[3] = 1'bX;
	instruction_expected[3] = #999000 1'b0;
end 
// expected instruction[ 2 ]
initial
begin
	instruction_expected[2] = 1'bX;
	instruction_expected[2] = #999000 1'b0;
end 
// expected instruction[ 1 ]
initial
begin
	instruction_expected[1] = 1'bX;
	instruction_expected[1] = #999000 1'b0;
end 
// expected instruction[ 0 ]
initial
begin
	instruction_expected[0] = 1'bX;
	instruction_expected[0] = #999000 1'b0;
end 
// expected RD_teste[ 4 ]
initial
begin
	RD_teste_expected[4] = 1'bX;
end 
// expected RD_teste[ 3 ]
initial
begin
	RD_teste_expected[3] = 1'bX;
end 
// expected RD_teste[ 2 ]
initial
begin
	RD_teste_expected[2] = 1'bX;
end 
// expected RD_teste[ 1 ]
initial
begin
	RD_teste_expected[1] = 1'bX;
end 
// expected RD_teste[ 0 ]
initial
begin
	RD_teste_expected[0] = 1'bX;
end 
// expected RT_teste[ 4 ]
initial
begin
	RT_teste_expected[4] = 1'bX;
end 
// expected RT_teste[ 3 ]
initial
begin
	RT_teste_expected[3] = 1'bX;
end 
// expected RT_teste[ 2 ]
initial
begin
	RT_teste_expected[2] = 1'bX;
end 
// expected RT_teste[ 1 ]
initial
begin
	RT_teste_expected[1] = 1'bX;
end 
// expected RT_teste[ 0 ]
initial
begin
	RT_teste_expected[0] = 1'bX;
end 
// expected RS_teste[ 4 ]
initial
begin
	RS_teste_expected[4] = 1'bX;
end 
// expected RS_teste[ 3 ]
initial
begin
	RS_teste_expected[3] = 1'bX;
end 
// expected RS_teste[ 2 ]
initial
begin
	RS_teste_expected[2] = 1'bX;
end 
// expected RS_teste[ 1 ]
initial
begin
	RS_teste_expected[1] = 1'bX;
end 
// expected RS_teste[ 0 ]
initial
begin
	RS_teste_expected[0] = 1'bX;
end 
// expected saida_alu_teste[ 31 ]
initial
begin
	saida_alu_teste_expected[31] = 1'bX;
end 
// expected saida_alu_teste[ 30 ]
initial
begin
	saida_alu_teste_expected[30] = 1'bX;
end 
// expected saida_alu_teste[ 29 ]
initial
begin
	saida_alu_teste_expected[29] = 1'bX;
end 
// expected saida_alu_teste[ 28 ]
initial
begin
	saida_alu_teste_expected[28] = 1'bX;
end 
// expected saida_alu_teste[ 27 ]
initial
begin
	saida_alu_teste_expected[27] = 1'bX;
end 
// expected saida_alu_teste[ 26 ]
initial
begin
	saida_alu_teste_expected[26] = 1'bX;
end 
// expected saida_alu_teste[ 25 ]
initial
begin
	saida_alu_teste_expected[25] = 1'bX;
end 
// expected saida_alu_teste[ 24 ]
initial
begin
	saida_alu_teste_expected[24] = 1'bX;
end 
// expected saida_alu_teste[ 23 ]
initial
begin
	saida_alu_teste_expected[23] = 1'bX;
end 
// expected saida_alu_teste[ 22 ]
initial
begin
	saida_alu_teste_expected[22] = 1'bX;
end 
// expected saida_alu_teste[ 21 ]
initial
begin
	saida_alu_teste_expected[21] = 1'bX;
end 
// expected saida_alu_teste[ 20 ]
initial
begin
	saida_alu_teste_expected[20] = 1'bX;
end 
// expected saida_alu_teste[ 19 ]
initial
begin
	saida_alu_teste_expected[19] = 1'bX;
end 
// expected saida_alu_teste[ 18 ]
initial
begin
	saida_alu_teste_expected[18] = 1'bX;
end 
// expected saida_alu_teste[ 17 ]
initial
begin
	saida_alu_teste_expected[17] = 1'bX;
end 
// expected saida_alu_teste[ 16 ]
initial
begin
	saida_alu_teste_expected[16] = 1'bX;
end 
// expected saida_alu_teste[ 15 ]
initial
begin
	saida_alu_teste_expected[15] = 1'bX;
end 
// expected saida_alu_teste[ 14 ]
initial
begin
	saida_alu_teste_expected[14] = 1'bX;
end 
// expected saida_alu_teste[ 13 ]
initial
begin
	saida_alu_teste_expected[13] = 1'bX;
end 
// expected saida_alu_teste[ 12 ]
initial
begin
	saida_alu_teste_expected[12] = 1'bX;
end 
// expected saida_alu_teste[ 11 ]
initial
begin
	saida_alu_teste_expected[11] = 1'bX;
end 
// expected saida_alu_teste[ 10 ]
initial
begin
	saida_alu_teste_expected[10] = 1'bX;
end 
// expected saida_alu_teste[ 9 ]
initial
begin
	saida_alu_teste_expected[9] = 1'bX;
end 
// expected saida_alu_teste[ 8 ]
initial
begin
	saida_alu_teste_expected[8] = 1'bX;
end 
// expected saida_alu_teste[ 7 ]
initial
begin
	saida_alu_teste_expected[7] = 1'bX;
end 
// expected saida_alu_teste[ 6 ]
initial
begin
	saida_alu_teste_expected[6] = 1'bX;
end 
// expected saida_alu_teste[ 5 ]
initial
begin
	saida_alu_teste_expected[5] = 1'bX;
end 
// expected saida_alu_teste[ 4 ]
initial
begin
	saida_alu_teste_expected[4] = 1'bX;
end 
// expected saida_alu_teste[ 3 ]
initial
begin
	saida_alu_teste_expected[3] = 1'bX;
end 
// expected saida_alu_teste[ 2 ]
initial
begin
	saida_alu_teste_expected[2] = 1'bX;
end 
// expected saida_alu_teste[ 1 ]
initial
begin
	saida_alu_teste_expected[1] = 1'bX;
end 
// expected saida_alu_teste[ 0 ]
initial
begin
	saida_alu_teste_expected[0] = 1'bX;
end 
// expected A_teste[ 31 ]
initial
begin
	A_teste_expected[31] = 1'bX;
	A_teste_expected[31] = #999000 1'b0;
end 
// expected A_teste[ 30 ]
initial
begin
	A_teste_expected[30] = 1'bX;
	A_teste_expected[30] = #999000 1'b0;
end 
// expected A_teste[ 29 ]
initial
begin
	A_teste_expected[29] = 1'bX;
	A_teste_expected[29] = #999000 1'b0;
end 
// expected A_teste[ 28 ]
initial
begin
	A_teste_expected[28] = 1'bX;
	A_teste_expected[28] = #999000 1'b0;
end 
// expected A_teste[ 27 ]
initial
begin
	A_teste_expected[27] = 1'bX;
	A_teste_expected[27] = #999000 1'b0;
end 
// expected A_teste[ 26 ]
initial
begin
	A_teste_expected[26] = 1'bX;
	A_teste_expected[26] = #999000 1'b0;
end 
// expected A_teste[ 25 ]
initial
begin
	A_teste_expected[25] = 1'bX;
	A_teste_expected[25] = #999000 1'b0;
end 
// expected A_teste[ 24 ]
initial
begin
	A_teste_expected[24] = 1'bX;
	A_teste_expected[24] = #999000 1'b0;
end 
// expected A_teste[ 23 ]
initial
begin
	A_teste_expected[23] = 1'bX;
	A_teste_expected[23] = #999000 1'b0;
end 
// expected A_teste[ 22 ]
initial
begin
	A_teste_expected[22] = 1'bX;
	A_teste_expected[22] = #999000 1'b0;
end 
// expected A_teste[ 21 ]
initial
begin
	A_teste_expected[21] = 1'bX;
	A_teste_expected[21] = #999000 1'b0;
end 
// expected A_teste[ 20 ]
initial
begin
	A_teste_expected[20] = 1'bX;
	A_teste_expected[20] = #999000 1'b0;
end 
// expected A_teste[ 19 ]
initial
begin
	A_teste_expected[19] = 1'bX;
	A_teste_expected[19] = #999000 1'b0;
end 
// expected A_teste[ 18 ]
initial
begin
	A_teste_expected[18] = 1'bX;
	A_teste_expected[18] = #999000 1'b0;
end 
// expected A_teste[ 17 ]
initial
begin
	A_teste_expected[17] = 1'bX;
	A_teste_expected[17] = #999000 1'b0;
end 
// expected A_teste[ 16 ]
initial
begin
	A_teste_expected[16] = 1'bX;
	A_teste_expected[16] = #999000 1'b0;
end 
// expected A_teste[ 15 ]
initial
begin
	A_teste_expected[15] = 1'bX;
	A_teste_expected[15] = #999000 1'b0;
end 
// expected A_teste[ 14 ]
initial
begin
	A_teste_expected[14] = 1'bX;
	A_teste_expected[14] = #999000 1'b0;
end 
// expected A_teste[ 13 ]
initial
begin
	A_teste_expected[13] = 1'bX;
	A_teste_expected[13] = #999000 1'b0;
end 
// expected A_teste[ 12 ]
initial
begin
	A_teste_expected[12] = 1'bX;
	A_teste_expected[12] = #999000 1'b0;
end 
// expected A_teste[ 11 ]
initial
begin
	A_teste_expected[11] = 1'bX;
	A_teste_expected[11] = #999000 1'b0;
end 
// expected A_teste[ 10 ]
initial
begin
	A_teste_expected[10] = 1'bX;
	A_teste_expected[10] = #999000 1'b0;
end 
// expected A_teste[ 9 ]
initial
begin
	A_teste_expected[9] = 1'bX;
	A_teste_expected[9] = #999000 1'b0;
end 
// expected A_teste[ 8 ]
initial
begin
	A_teste_expected[8] = 1'bX;
	A_teste_expected[8] = #999000 1'b0;
end 
// expected A_teste[ 7 ]
initial
begin
	A_teste_expected[7] = 1'bX;
	A_teste_expected[7] = #999000 1'b0;
end 
// expected A_teste[ 6 ]
initial
begin
	A_teste_expected[6] = 1'bX;
	A_teste_expected[6] = #999000 1'b0;
end 
// expected A_teste[ 5 ]
initial
begin
	A_teste_expected[5] = 1'bX;
	A_teste_expected[5] = #999000 1'b0;
end 
// expected A_teste[ 4 ]
initial
begin
	A_teste_expected[4] = 1'bX;
	A_teste_expected[4] = #999000 1'b0;
end 
// expected A_teste[ 3 ]
initial
begin
	A_teste_expected[3] = 1'bX;
	A_teste_expected[3] = #999000 1'b0;
end 
// expected A_teste[ 2 ]
initial
begin
	A_teste_expected[2] = 1'bX;
	A_teste_expected[2] = #999000 1'b0;
end 
// expected A_teste[ 1 ]
initial
begin
	A_teste_expected[1] = 1'bX;
	A_teste_expected[1] = #999000 1'b0;
end 
// expected A_teste[ 0 ]
initial
begin
	A_teste_expected[0] = 1'bX;
	A_teste_expected[0] = #999000 1'b0;
end 
// expected B_teste[ 31 ]
initial
begin
	B_teste_expected[31] = 1'bX;
	B_teste_expected[31] = #999000 1'b0;
end 
// expected B_teste[ 30 ]
initial
begin
	B_teste_expected[30] = 1'bX;
	B_teste_expected[30] = #999000 1'b0;
end 
// expected B_teste[ 29 ]
initial
begin
	B_teste_expected[29] = 1'bX;
	B_teste_expected[29] = #999000 1'b0;
end 
// expected B_teste[ 28 ]
initial
begin
	B_teste_expected[28] = 1'bX;
	B_teste_expected[28] = #999000 1'b0;
end 
// expected B_teste[ 27 ]
initial
begin
	B_teste_expected[27] = 1'bX;
	B_teste_expected[27] = #999000 1'b0;
end 
// expected B_teste[ 26 ]
initial
begin
	B_teste_expected[26] = 1'bX;
	B_teste_expected[26] = #999000 1'b0;
end 
// expected B_teste[ 25 ]
initial
begin
	B_teste_expected[25] = 1'bX;
	B_teste_expected[25] = #999000 1'b0;
end 
// expected B_teste[ 24 ]
initial
begin
	B_teste_expected[24] = 1'bX;
	B_teste_expected[24] = #999000 1'b0;
end 
// expected B_teste[ 23 ]
initial
begin
	B_teste_expected[23] = 1'bX;
	B_teste_expected[23] = #999000 1'b0;
end 
// expected B_teste[ 22 ]
initial
begin
	B_teste_expected[22] = 1'bX;
	B_teste_expected[22] = #999000 1'b0;
end 
// expected B_teste[ 21 ]
initial
begin
	B_teste_expected[21] = 1'bX;
	B_teste_expected[21] = #999000 1'b0;
end 
// expected B_teste[ 20 ]
initial
begin
	B_teste_expected[20] = 1'bX;
	B_teste_expected[20] = #999000 1'b0;
end 
// expected B_teste[ 19 ]
initial
begin
	B_teste_expected[19] = 1'bX;
	B_teste_expected[19] = #999000 1'b0;
end 
// expected B_teste[ 18 ]
initial
begin
	B_teste_expected[18] = 1'bX;
	B_teste_expected[18] = #999000 1'b0;
end 
// expected B_teste[ 17 ]
initial
begin
	B_teste_expected[17] = 1'bX;
	B_teste_expected[17] = #999000 1'b0;
end 
// expected B_teste[ 16 ]
initial
begin
	B_teste_expected[16] = 1'bX;
	B_teste_expected[16] = #999000 1'b0;
end 
// expected B_teste[ 15 ]
initial
begin
	B_teste_expected[15] = 1'bX;
	B_teste_expected[15] = #999000 1'b0;
end 
// expected B_teste[ 14 ]
initial
begin
	B_teste_expected[14] = 1'bX;
	B_teste_expected[14] = #999000 1'b0;
end 
// expected B_teste[ 13 ]
initial
begin
	B_teste_expected[13] = 1'bX;
	B_teste_expected[13] = #999000 1'b0;
end 
// expected B_teste[ 12 ]
initial
begin
	B_teste_expected[12] = 1'bX;
	B_teste_expected[12] = #999000 1'b0;
end 
// expected B_teste[ 11 ]
initial
begin
	B_teste_expected[11] = 1'bX;
	B_teste_expected[11] = #999000 1'b0;
end 
// expected B_teste[ 10 ]
initial
begin
	B_teste_expected[10] = 1'bX;
	B_teste_expected[10] = #999000 1'b0;
end 
// expected B_teste[ 9 ]
initial
begin
	B_teste_expected[9] = 1'bX;
	B_teste_expected[9] = #999000 1'b0;
end 
// expected B_teste[ 8 ]
initial
begin
	B_teste_expected[8] = 1'bX;
	B_teste_expected[8] = #999000 1'b0;
end 
// expected B_teste[ 7 ]
initial
begin
	B_teste_expected[7] = 1'bX;
	B_teste_expected[7] = #999000 1'b0;
end 
// expected B_teste[ 6 ]
initial
begin
	B_teste_expected[6] = 1'bX;
	B_teste_expected[6] = #999000 1'b0;
end 
// expected B_teste[ 5 ]
initial
begin
	B_teste_expected[5] = 1'bX;
	B_teste_expected[5] = #999000 1'b0;
end 
// expected B_teste[ 4 ]
initial
begin
	B_teste_expected[4] = 1'bX;
	B_teste_expected[4] = #999000 1'b0;
end 
// expected B_teste[ 3 ]
initial
begin
	B_teste_expected[3] = 1'bX;
	B_teste_expected[3] = #999000 1'b0;
end 
// expected B_teste[ 2 ]
initial
begin
	B_teste_expected[2] = 1'bX;
	B_teste_expected[2] = #999000 1'b0;
end 
// expected B_teste[ 1 ]
initial
begin
	B_teste_expected[1] = 1'bX;
	B_teste_expected[1] = #999000 1'b0;
end 
// expected B_teste[ 0 ]
initial
begin
	B_teste_expected[0] = 1'bX;
	B_teste_expected[0] = #999000 1'b0;
end 
// expected datA_Write2_teste[ 31 ]
initial
begin
	datA_Write2_teste_expected[31] = 1'bX;
end 
// expected datA_Write2_teste[ 30 ]
initial
begin
	datA_Write2_teste_expected[30] = 1'bX;
end 
// expected datA_Write2_teste[ 29 ]
initial
begin
	datA_Write2_teste_expected[29] = 1'bX;
end 
// expected datA_Write2_teste[ 28 ]
initial
begin
	datA_Write2_teste_expected[28] = 1'bX;
end 
// expected datA_Write2_teste[ 27 ]
initial
begin
	datA_Write2_teste_expected[27] = 1'bX;
end 
// expected datA_Write2_teste[ 26 ]
initial
begin
	datA_Write2_teste_expected[26] = 1'bX;
end 
// expected datA_Write2_teste[ 25 ]
initial
begin
	datA_Write2_teste_expected[25] = 1'bX;
end 
// expected datA_Write2_teste[ 24 ]
initial
begin
	datA_Write2_teste_expected[24] = 1'bX;
end 
// expected datA_Write2_teste[ 23 ]
initial
begin
	datA_Write2_teste_expected[23] = 1'bX;
end 
// expected datA_Write2_teste[ 22 ]
initial
begin
	datA_Write2_teste_expected[22] = 1'bX;
end 
// expected datA_Write2_teste[ 21 ]
initial
begin
	datA_Write2_teste_expected[21] = 1'bX;
end 
// expected datA_Write2_teste[ 20 ]
initial
begin
	datA_Write2_teste_expected[20] = 1'bX;
end 
// expected datA_Write2_teste[ 19 ]
initial
begin
	datA_Write2_teste_expected[19] = 1'bX;
end 
// expected datA_Write2_teste[ 18 ]
initial
begin
	datA_Write2_teste_expected[18] = 1'bX;
end 
// expected datA_Write2_teste[ 17 ]
initial
begin
	datA_Write2_teste_expected[17] = 1'bX;
end 
// expected datA_Write2_teste[ 16 ]
initial
begin
	datA_Write2_teste_expected[16] = 1'bX;
end 
// expected datA_Write2_teste[ 15 ]
initial
begin
	datA_Write2_teste_expected[15] = 1'bX;
end 
// expected datA_Write2_teste[ 14 ]
initial
begin
	datA_Write2_teste_expected[14] = 1'bX;
end 
// expected datA_Write2_teste[ 13 ]
initial
begin
	datA_Write2_teste_expected[13] = 1'bX;
end 
// expected datA_Write2_teste[ 12 ]
initial
begin
	datA_Write2_teste_expected[12] = 1'bX;
end 
// expected datA_Write2_teste[ 11 ]
initial
begin
	datA_Write2_teste_expected[11] = 1'bX;
end 
// expected datA_Write2_teste[ 10 ]
initial
begin
	datA_Write2_teste_expected[10] = 1'bX;
end 
// expected datA_Write2_teste[ 9 ]
initial
begin
	datA_Write2_teste_expected[9] = 1'bX;
end 
// expected datA_Write2_teste[ 8 ]
initial
begin
	datA_Write2_teste_expected[8] = 1'bX;
end 
// expected datA_Write2_teste[ 7 ]
initial
begin
	datA_Write2_teste_expected[7] = 1'bX;
end 
// expected datA_Write2_teste[ 6 ]
initial
begin
	datA_Write2_teste_expected[6] = 1'bX;
end 
// expected datA_Write2_teste[ 5 ]
initial
begin
	datA_Write2_teste_expected[5] = 1'bX;
end 
// expected datA_Write2_teste[ 4 ]
initial
begin
	datA_Write2_teste_expected[4] = 1'bX;
end 
// expected datA_Write2_teste[ 3 ]
initial
begin
	datA_Write2_teste_expected[3] = 1'bX;
end 
// expected datA_Write2_teste[ 2 ]
initial
begin
	datA_Write2_teste_expected[2] = 1'bX;
end 
// expected datA_Write2_teste[ 1 ]
initial
begin
	datA_Write2_teste_expected[1] = 1'bX;
end 
// expected datA_Write2_teste[ 0 ]
initial
begin
	datA_Write2_teste_expected[0] = 1'bX;
end 

// expected EscreveReg_teste
initial
begin
	EscreveReg_teste_expected = 1'bX;
end 
// expected imm[ 15 ]
initial
begin
	imm_expected[15] = 1'bX;
end 
// expected imm[ 14 ]
initial
begin
	imm_expected[14] = 1'bX;
end 
// expected imm[ 13 ]
initial
begin
	imm_expected[13] = 1'bX;
end 
// expected imm[ 12 ]
initial
begin
	imm_expected[12] = 1'bX;
end 
// expected imm[ 11 ]
initial
begin
	imm_expected[11] = 1'bX;
end 
// expected imm[ 10 ]
initial
begin
	imm_expected[10] = 1'bX;
end 
// expected imm[ 9 ]
initial
begin
	imm_expected[9] = 1'bX;
end 
// expected imm[ 8 ]
initial
begin
	imm_expected[8] = 1'bX;
end 
// expected imm[ 7 ]
initial
begin
	imm_expected[7] = 1'bX;
end 
// expected imm[ 6 ]
initial
begin
	imm_expected[6] = 1'bX;
end 
// expected imm[ 5 ]
initial
begin
	imm_expected[5] = 1'bX;
end 
// expected imm[ 4 ]
initial
begin
	imm_expected[4] = 1'bX;
end 
// expected imm[ 3 ]
initial
begin
	imm_expected[3] = 1'bX;
end 
// expected imm[ 2 ]
initial
begin
	imm_expected[2] = 1'bX;
end 
// expected imm[ 1 ]
initial
begin
	imm_expected[1] = 1'bX;
end 
// expected imm[ 0 ]
initial
begin
	imm_expected[0] = 1'bX;
end 

// expected louD_teste
initial
begin
	louD_teste_expected = 1'bX;
end 

// expected MemparaReg_teste
initial
begin
	MemparaReg_teste_expected = 1'bX;
end 
// expected OrigBAlu_teste[ 1 ]
initial
begin
	OrigBAlu_teste_expected[1] = 1'bX;
	OrigBAlu_teste_expected[1] = #999000 1'b0;
end 
// expected OrigBAlu_teste[ 0 ]
initial
begin
	OrigBAlu_teste_expected[0] = 1'bX;
	OrigBAlu_teste_expected[0] = #999000 1'b0;
end 
// expected RDM_out_teste[ 31 ]
initial
begin
	RDM_out_teste_expected[31] = 1'bX;
end 
// expected RDM_out_teste[ 30 ]
initial
begin
	RDM_out_teste_expected[30] = 1'bX;
end 
// expected RDM_out_teste[ 29 ]
initial
begin
	RDM_out_teste_expected[29] = 1'bX;
end 
// expected RDM_out_teste[ 28 ]
initial
begin
	RDM_out_teste_expected[28] = 1'bX;
end 
// expected RDM_out_teste[ 27 ]
initial
begin
	RDM_out_teste_expected[27] = 1'bX;
end 
// expected RDM_out_teste[ 26 ]
initial
begin
	RDM_out_teste_expected[26] = 1'bX;
end 
// expected RDM_out_teste[ 25 ]
initial
begin
	RDM_out_teste_expected[25] = 1'bX;
end 
// expected RDM_out_teste[ 24 ]
initial
begin
	RDM_out_teste_expected[24] = 1'bX;
end 
// expected RDM_out_teste[ 23 ]
initial
begin
	RDM_out_teste_expected[23] = 1'bX;
end 
// expected RDM_out_teste[ 22 ]
initial
begin
	RDM_out_teste_expected[22] = 1'bX;
end 
// expected RDM_out_teste[ 21 ]
initial
begin
	RDM_out_teste_expected[21] = 1'bX;
end 
// expected RDM_out_teste[ 20 ]
initial
begin
	RDM_out_teste_expected[20] = 1'bX;
end 
// expected RDM_out_teste[ 19 ]
initial
begin
	RDM_out_teste_expected[19] = 1'bX;
end 
// expected RDM_out_teste[ 18 ]
initial
begin
	RDM_out_teste_expected[18] = 1'bX;
end 
// expected RDM_out_teste[ 17 ]
initial
begin
	RDM_out_teste_expected[17] = 1'bX;
end 
// expected RDM_out_teste[ 16 ]
initial
begin
	RDM_out_teste_expected[16] = 1'bX;
end 
// expected RDM_out_teste[ 15 ]
initial
begin
	RDM_out_teste_expected[15] = 1'bX;
end 
// expected RDM_out_teste[ 14 ]
initial
begin
	RDM_out_teste_expected[14] = 1'bX;
end 
// expected RDM_out_teste[ 13 ]
initial
begin
	RDM_out_teste_expected[13] = 1'bX;
end 
// expected RDM_out_teste[ 12 ]
initial
begin
	RDM_out_teste_expected[12] = 1'bX;
end 
// expected RDM_out_teste[ 11 ]
initial
begin
	RDM_out_teste_expected[11] = 1'bX;
end 
// expected RDM_out_teste[ 10 ]
initial
begin
	RDM_out_teste_expected[10] = 1'bX;
end 
// expected RDM_out_teste[ 9 ]
initial
begin
	RDM_out_teste_expected[9] = 1'bX;
end 
// expected RDM_out_teste[ 8 ]
initial
begin
	RDM_out_teste_expected[8] = 1'bX;
end 
// expected RDM_out_teste[ 7 ]
initial
begin
	RDM_out_teste_expected[7] = 1'bX;
end 
// expected RDM_out_teste[ 6 ]
initial
begin
	RDM_out_teste_expected[6] = 1'bX;
end 
// expected RDM_out_teste[ 5 ]
initial
begin
	RDM_out_teste_expected[5] = 1'bX;
end 
// expected RDM_out_teste[ 4 ]
initial
begin
	RDM_out_teste_expected[4] = 1'bX;
end 
// expected RDM_out_teste[ 3 ]
initial
begin
	RDM_out_teste_expected[3] = 1'bX;
end 
// expected RDM_out_teste[ 2 ]
initial
begin
	RDM_out_teste_expected[2] = 1'bX;
end 
// expected RDM_out_teste[ 1 ]
initial
begin
	RDM_out_teste_expected[1] = 1'bX;
end 
// expected RDM_out_teste[ 0 ]
initial
begin
	RDM_out_teste_expected[0] = 1'bX;
end 
// expected Reg_Write3_teste[ 31 ]
initial
begin
	Reg_Write3_teste_expected[31] = 1'bX;
end 
// expected Reg_Write3_teste[ 30 ]
initial
begin
	Reg_Write3_teste_expected[30] = 1'bX;
end 
// expected Reg_Write3_teste[ 29 ]
initial
begin
	Reg_Write3_teste_expected[29] = 1'bX;
end 
// expected Reg_Write3_teste[ 28 ]
initial
begin
	Reg_Write3_teste_expected[28] = 1'bX;
end 
// expected Reg_Write3_teste[ 27 ]
initial
begin
	Reg_Write3_teste_expected[27] = 1'bX;
end 
// expected Reg_Write3_teste[ 26 ]
initial
begin
	Reg_Write3_teste_expected[26] = 1'bX;
end 
// expected Reg_Write3_teste[ 25 ]
initial
begin
	Reg_Write3_teste_expected[25] = 1'bX;
end 
// expected Reg_Write3_teste[ 24 ]
initial
begin
	Reg_Write3_teste_expected[24] = 1'bX;
end 
// expected Reg_Write3_teste[ 23 ]
initial
begin
	Reg_Write3_teste_expected[23] = 1'bX;
end 
// expected Reg_Write3_teste[ 22 ]
initial
begin
	Reg_Write3_teste_expected[22] = 1'bX;
end 
// expected Reg_Write3_teste[ 21 ]
initial
begin
	Reg_Write3_teste_expected[21] = 1'bX;
end 
// expected Reg_Write3_teste[ 20 ]
initial
begin
	Reg_Write3_teste_expected[20] = 1'bX;
end 
// expected Reg_Write3_teste[ 19 ]
initial
begin
	Reg_Write3_teste_expected[19] = 1'bX;
end 
// expected Reg_Write3_teste[ 18 ]
initial
begin
	Reg_Write3_teste_expected[18] = 1'bX;
end 
// expected Reg_Write3_teste[ 17 ]
initial
begin
	Reg_Write3_teste_expected[17] = 1'bX;
end 
// expected Reg_Write3_teste[ 16 ]
initial
begin
	Reg_Write3_teste_expected[16] = 1'bX;
end 
// expected Reg_Write3_teste[ 15 ]
initial
begin
	Reg_Write3_teste_expected[15] = 1'bX;
end 
// expected Reg_Write3_teste[ 14 ]
initial
begin
	Reg_Write3_teste_expected[14] = 1'bX;
end 
// expected Reg_Write3_teste[ 13 ]
initial
begin
	Reg_Write3_teste_expected[13] = 1'bX;
end 
// expected Reg_Write3_teste[ 12 ]
initial
begin
	Reg_Write3_teste_expected[12] = 1'bX;
end 
// expected Reg_Write3_teste[ 11 ]
initial
begin
	Reg_Write3_teste_expected[11] = 1'bX;
end 
// expected Reg_Write3_teste[ 10 ]
initial
begin
	Reg_Write3_teste_expected[10] = 1'bX;
end 
// expected Reg_Write3_teste[ 9 ]
initial
begin
	Reg_Write3_teste_expected[9] = 1'bX;
end 
// expected Reg_Write3_teste[ 8 ]
initial
begin
	Reg_Write3_teste_expected[8] = 1'bX;
end 
// expected Reg_Write3_teste[ 7 ]
initial
begin
	Reg_Write3_teste_expected[7] = 1'bX;
end 
// expected Reg_Write3_teste[ 6 ]
initial
begin
	Reg_Write3_teste_expected[6] = 1'bX;
end 
// expected Reg_Write3_teste[ 5 ]
initial
begin
	Reg_Write3_teste_expected[5] = 1'bX;
end 
// expected Reg_Write3_teste[ 4 ]
initial
begin
	Reg_Write3_teste_expected[4] = 1'bX;
end 
// expected Reg_Write3_teste[ 3 ]
initial
begin
	Reg_Write3_teste_expected[3] = 1'bX;
end 
// expected Reg_Write3_teste[ 2 ]
initial
begin
	Reg_Write3_teste_expected[2] = 1'bX;
end 
// expected Reg_Write3_teste[ 1 ]
initial
begin
	Reg_Write3_teste_expected[1] = 1'bX;
end 
// expected Reg_Write3_teste[ 0 ]
initial
begin
	Reg_Write3_teste_expected[0] = 1'bX;
end 

// expected regDST_test
initial
begin
	regDST_test_expected = 1'bX;
end 
// expected REg_Write3_5[ 4 ]
initial
begin
	REg_Write3_5_expected[4] = 1'bX;
end 
// expected REg_Write3_5[ 3 ]
initial
begin
	REg_Write3_5_expected[3] = 1'bX;
end 
// expected REg_Write3_5[ 2 ]
initial
begin
	REg_Write3_5_expected[2] = 1'bX;
end 
// expected REg_Write3_5[ 1 ]
initial
begin
	REg_Write3_5_expected[1] = 1'bX;
end 
// expected REg_Write3_5[ 0 ]
initial
begin
	REg_Write3_5_expected[0] = 1'bX;
end 

// expected EnablePC_teste
initial
begin
	EnablePC_teste_expected = 1'bX;
end 

// expected is_bgez_teste
initial
begin
	is_bgez_teste_expected = 1'bX;
end 
// expected op_alu_test[ 3 ]
initial
begin
	op_alu_test_expected[3] = 1'bX;
end 
// expected op_alu_test[ 2 ]
initial
begin
	op_alu_test_expected[2] = 1'bX;
end 
// expected op_alu_test[ 1 ]
initial
begin
	op_alu_test_expected[1] = 1'bX;
end 
// expected op_alu_test[ 0 ]
initial
begin
	op_alu_test_expected[0] = 1'bX;
end 
// generate trigger
always @(A_teste_expected or A_teste or address_expected or address or B_teste_expected or B_teste or datA_Write2_teste_expected or datA_Write2_teste or EnablePC_teste_expected or EnablePC_teste or Endereco_MEM_teste_expected or Endereco_MEM_teste or EscreveReg_teste_expected or EscreveReg_teste or imm_expected or imm or instruction_expected or instruction or is_bgez_teste_expected or is_bgez_teste or louD_teste_expected or louD_teste or MemparaReg_teste_expected or MemparaReg_teste or op_alu_test_expected or op_alu_test or OrigBAlu_teste_expected or OrigBAlu_teste or RD_teste_expected or RD_teste or RDM_out_teste_expected or RDM_out_teste or REg_Write3_5_expected or REg_Write3_5 or Reg_Write3_teste_expected or Reg_Write3_teste or regDST_test_expected or regDST_test or RS_teste_expected or RS_teste or RT_teste_expected or RT_teste or saida_alu_teste_expected or saida_alu_teste)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_teste = %b | expected address = %b | expected B_teste = %b | expected datA_Write2_teste = %b | expected EnablePC_teste = %b | expected Endereco_MEM_teste = %b | expected EscreveReg_teste = %b | expected imm = %b | expected instruction = %b | expected is_bgez_teste = %b | expected louD_teste = %b | expected MemparaReg_teste = %b | expected op_alu_test = %b | expected OrigBAlu_teste = %b | expected RD_teste = %b | expected RDM_out_teste = %b | expected REg_Write3_5 = %b | expected Reg_Write3_teste = %b | expected regDST_test = %b | expected RS_teste = %b | expected RT_teste = %b | expected saida_alu_teste = %b | ",A_teste_expected_prev,address_expected_prev,B_teste_expected_prev,datA_Write2_teste_expected_prev,EnablePC_teste_expected_prev,Endereco_MEM_teste_expected_prev,EscreveReg_teste_expected_prev,imm_expected_prev,instruction_expected_prev,is_bgez_teste_expected_prev,louD_teste_expected_prev,MemparaReg_teste_expected_prev,op_alu_test_expected_prev,OrigBAlu_teste_expected_prev,RD_teste_expected_prev,RDM_out_teste_expected_prev,REg_Write3_5_expected_prev,Reg_Write3_teste_expected_prev,regDST_test_expected_prev,RS_teste_expected_prev,RT_teste_expected_prev,saida_alu_teste_expected_prev);
	$display("| real A_teste = %b | real address = %b | real B_teste = %b | real datA_Write2_teste = %b | real EnablePC_teste = %b | real Endereco_MEM_teste = %b | real EscreveReg_teste = %b | real imm = %b | real instruction = %b | real is_bgez_teste = %b | real louD_teste = %b | real MemparaReg_teste = %b | real op_alu_test = %b | real OrigBAlu_teste = %b | real RD_teste = %b | real RDM_out_teste = %b | real REg_Write3_5 = %b | real Reg_Write3_teste = %b | real regDST_test = %b | real RS_teste = %b | real RT_teste = %b | real saida_alu_teste = %b | ",A_teste_prev,address_prev,B_teste_prev,datA_Write2_teste_prev,EnablePC_teste_prev,Endereco_MEM_teste_prev,EscreveReg_teste_prev,imm_prev,instruction_prev,is_bgez_teste_prev,louD_teste_prev,MemparaReg_teste_prev,op_alu_test_prev,OrigBAlu_teste_prev,RD_teste_prev,RDM_out_teste_prev,REg_Write3_5_prev,Reg_Write3_teste_prev,regDST_test_prev,RS_teste_prev,RT_teste_prev,saida_alu_teste_prev);
`endif
	if (
		( A_teste_expected_prev[0] !== 1'bx ) && ( A_teste_prev[0] !== A_teste_expected_prev[0] )
		&& ((A_teste_expected_prev[0] !== last_A_teste_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[0] = A_teste_expected_prev[0];
	end
	if (
		( A_teste_expected_prev[1] !== 1'bx ) && ( A_teste_prev[1] !== A_teste_expected_prev[1] )
		&& ((A_teste_expected_prev[1] !== last_A_teste_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[1] = A_teste_expected_prev[1];
	end
	if (
		( A_teste_expected_prev[2] !== 1'bx ) && ( A_teste_prev[2] !== A_teste_expected_prev[2] )
		&& ((A_teste_expected_prev[2] !== last_A_teste_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[2] = A_teste_expected_prev[2];
	end
	if (
		( A_teste_expected_prev[3] !== 1'bx ) && ( A_teste_prev[3] !== A_teste_expected_prev[3] )
		&& ((A_teste_expected_prev[3] !== last_A_teste_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[3] = A_teste_expected_prev[3];
	end
	if (
		( A_teste_expected_prev[4] !== 1'bx ) && ( A_teste_prev[4] !== A_teste_expected_prev[4] )
		&& ((A_teste_expected_prev[4] !== last_A_teste_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[4] = A_teste_expected_prev[4];
	end
	if (
		( A_teste_expected_prev[5] !== 1'bx ) && ( A_teste_prev[5] !== A_teste_expected_prev[5] )
		&& ((A_teste_expected_prev[5] !== last_A_teste_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[5] = A_teste_expected_prev[5];
	end
	if (
		( A_teste_expected_prev[6] !== 1'bx ) && ( A_teste_prev[6] !== A_teste_expected_prev[6] )
		&& ((A_teste_expected_prev[6] !== last_A_teste_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[6] = A_teste_expected_prev[6];
	end
	if (
		( A_teste_expected_prev[7] !== 1'bx ) && ( A_teste_prev[7] !== A_teste_expected_prev[7] )
		&& ((A_teste_expected_prev[7] !== last_A_teste_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[7] = A_teste_expected_prev[7];
	end
	if (
		( A_teste_expected_prev[8] !== 1'bx ) && ( A_teste_prev[8] !== A_teste_expected_prev[8] )
		&& ((A_teste_expected_prev[8] !== last_A_teste_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[8] = A_teste_expected_prev[8];
	end
	if (
		( A_teste_expected_prev[9] !== 1'bx ) && ( A_teste_prev[9] !== A_teste_expected_prev[9] )
		&& ((A_teste_expected_prev[9] !== last_A_teste_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[9] = A_teste_expected_prev[9];
	end
	if (
		( A_teste_expected_prev[10] !== 1'bx ) && ( A_teste_prev[10] !== A_teste_expected_prev[10] )
		&& ((A_teste_expected_prev[10] !== last_A_teste_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[10] = A_teste_expected_prev[10];
	end
	if (
		( A_teste_expected_prev[11] !== 1'bx ) && ( A_teste_prev[11] !== A_teste_expected_prev[11] )
		&& ((A_teste_expected_prev[11] !== last_A_teste_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[11] = A_teste_expected_prev[11];
	end
	if (
		( A_teste_expected_prev[12] !== 1'bx ) && ( A_teste_prev[12] !== A_teste_expected_prev[12] )
		&& ((A_teste_expected_prev[12] !== last_A_teste_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[12] = A_teste_expected_prev[12];
	end
	if (
		( A_teste_expected_prev[13] !== 1'bx ) && ( A_teste_prev[13] !== A_teste_expected_prev[13] )
		&& ((A_teste_expected_prev[13] !== last_A_teste_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[13] = A_teste_expected_prev[13];
	end
	if (
		( A_teste_expected_prev[14] !== 1'bx ) && ( A_teste_prev[14] !== A_teste_expected_prev[14] )
		&& ((A_teste_expected_prev[14] !== last_A_teste_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[14] = A_teste_expected_prev[14];
	end
	if (
		( A_teste_expected_prev[15] !== 1'bx ) && ( A_teste_prev[15] !== A_teste_expected_prev[15] )
		&& ((A_teste_expected_prev[15] !== last_A_teste_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[15] = A_teste_expected_prev[15];
	end
	if (
		( A_teste_expected_prev[16] !== 1'bx ) && ( A_teste_prev[16] !== A_teste_expected_prev[16] )
		&& ((A_teste_expected_prev[16] !== last_A_teste_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[16] = A_teste_expected_prev[16];
	end
	if (
		( A_teste_expected_prev[17] !== 1'bx ) && ( A_teste_prev[17] !== A_teste_expected_prev[17] )
		&& ((A_teste_expected_prev[17] !== last_A_teste_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[17] = A_teste_expected_prev[17];
	end
	if (
		( A_teste_expected_prev[18] !== 1'bx ) && ( A_teste_prev[18] !== A_teste_expected_prev[18] )
		&& ((A_teste_expected_prev[18] !== last_A_teste_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[18] = A_teste_expected_prev[18];
	end
	if (
		( A_teste_expected_prev[19] !== 1'bx ) && ( A_teste_prev[19] !== A_teste_expected_prev[19] )
		&& ((A_teste_expected_prev[19] !== last_A_teste_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[19] = A_teste_expected_prev[19];
	end
	if (
		( A_teste_expected_prev[20] !== 1'bx ) && ( A_teste_prev[20] !== A_teste_expected_prev[20] )
		&& ((A_teste_expected_prev[20] !== last_A_teste_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[20] = A_teste_expected_prev[20];
	end
	if (
		( A_teste_expected_prev[21] !== 1'bx ) && ( A_teste_prev[21] !== A_teste_expected_prev[21] )
		&& ((A_teste_expected_prev[21] !== last_A_teste_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[21] = A_teste_expected_prev[21];
	end
	if (
		( A_teste_expected_prev[22] !== 1'bx ) && ( A_teste_prev[22] !== A_teste_expected_prev[22] )
		&& ((A_teste_expected_prev[22] !== last_A_teste_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[22] = A_teste_expected_prev[22];
	end
	if (
		( A_teste_expected_prev[23] !== 1'bx ) && ( A_teste_prev[23] !== A_teste_expected_prev[23] )
		&& ((A_teste_expected_prev[23] !== last_A_teste_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[23] = A_teste_expected_prev[23];
	end
	if (
		( A_teste_expected_prev[24] !== 1'bx ) && ( A_teste_prev[24] !== A_teste_expected_prev[24] )
		&& ((A_teste_expected_prev[24] !== last_A_teste_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[24] = A_teste_expected_prev[24];
	end
	if (
		( A_teste_expected_prev[25] !== 1'bx ) && ( A_teste_prev[25] !== A_teste_expected_prev[25] )
		&& ((A_teste_expected_prev[25] !== last_A_teste_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[25] = A_teste_expected_prev[25];
	end
	if (
		( A_teste_expected_prev[26] !== 1'bx ) && ( A_teste_prev[26] !== A_teste_expected_prev[26] )
		&& ((A_teste_expected_prev[26] !== last_A_teste_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[26] = A_teste_expected_prev[26];
	end
	if (
		( A_teste_expected_prev[27] !== 1'bx ) && ( A_teste_prev[27] !== A_teste_expected_prev[27] )
		&& ((A_teste_expected_prev[27] !== last_A_teste_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[27] = A_teste_expected_prev[27];
	end
	if (
		( A_teste_expected_prev[28] !== 1'bx ) && ( A_teste_prev[28] !== A_teste_expected_prev[28] )
		&& ((A_teste_expected_prev[28] !== last_A_teste_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[28] = A_teste_expected_prev[28];
	end
	if (
		( A_teste_expected_prev[29] !== 1'bx ) && ( A_teste_prev[29] !== A_teste_expected_prev[29] )
		&& ((A_teste_expected_prev[29] !== last_A_teste_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[29] = A_teste_expected_prev[29];
	end
	if (
		( A_teste_expected_prev[30] !== 1'bx ) && ( A_teste_prev[30] !== A_teste_expected_prev[30] )
		&& ((A_teste_expected_prev[30] !== last_A_teste_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[30] = A_teste_expected_prev[30];
	end
	if (
		( A_teste_expected_prev[31] !== 1'bx ) && ( A_teste_prev[31] !== A_teste_expected_prev[31] )
		&& ((A_teste_expected_prev[31] !== last_A_teste_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_teste_expected_prev);
		$display ("     Real value = %b", A_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_teste_exp[31] = A_teste_expected_prev[31];
	end
	if (
		( address_expected_prev[0] !== 1'bx ) && ( address_prev[0] !== address_expected_prev[0] )
		&& ((address_expected_prev[0] !== last_address_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[0] = address_expected_prev[0];
	end
	if (
		( address_expected_prev[1] !== 1'bx ) && ( address_prev[1] !== address_expected_prev[1] )
		&& ((address_expected_prev[1] !== last_address_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[1] = address_expected_prev[1];
	end
	if (
		( address_expected_prev[2] !== 1'bx ) && ( address_prev[2] !== address_expected_prev[2] )
		&& ((address_expected_prev[2] !== last_address_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[2] = address_expected_prev[2];
	end
	if (
		( address_expected_prev[3] !== 1'bx ) && ( address_prev[3] !== address_expected_prev[3] )
		&& ((address_expected_prev[3] !== last_address_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[3] = address_expected_prev[3];
	end
	if (
		( address_expected_prev[4] !== 1'bx ) && ( address_prev[4] !== address_expected_prev[4] )
		&& ((address_expected_prev[4] !== last_address_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[4] = address_expected_prev[4];
	end
	if (
		( address_expected_prev[5] !== 1'bx ) && ( address_prev[5] !== address_expected_prev[5] )
		&& ((address_expected_prev[5] !== last_address_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[5] = address_expected_prev[5];
	end
	if (
		( address_expected_prev[6] !== 1'bx ) && ( address_prev[6] !== address_expected_prev[6] )
		&& ((address_expected_prev[6] !== last_address_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[6] = address_expected_prev[6];
	end
	if (
		( address_expected_prev[7] !== 1'bx ) && ( address_prev[7] !== address_expected_prev[7] )
		&& ((address_expected_prev[7] !== last_address_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[7] = address_expected_prev[7];
	end
	if (
		( address_expected_prev[8] !== 1'bx ) && ( address_prev[8] !== address_expected_prev[8] )
		&& ((address_expected_prev[8] !== last_address_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[8] = address_expected_prev[8];
	end
	if (
		( address_expected_prev[9] !== 1'bx ) && ( address_prev[9] !== address_expected_prev[9] )
		&& ((address_expected_prev[9] !== last_address_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[9] = address_expected_prev[9];
	end
	if (
		( address_expected_prev[10] !== 1'bx ) && ( address_prev[10] !== address_expected_prev[10] )
		&& ((address_expected_prev[10] !== last_address_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[10] = address_expected_prev[10];
	end
	if (
		( address_expected_prev[11] !== 1'bx ) && ( address_prev[11] !== address_expected_prev[11] )
		&& ((address_expected_prev[11] !== last_address_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[11] = address_expected_prev[11];
	end
	if (
		( address_expected_prev[12] !== 1'bx ) && ( address_prev[12] !== address_expected_prev[12] )
		&& ((address_expected_prev[12] !== last_address_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[12] = address_expected_prev[12];
	end
	if (
		( address_expected_prev[13] !== 1'bx ) && ( address_prev[13] !== address_expected_prev[13] )
		&& ((address_expected_prev[13] !== last_address_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[13] = address_expected_prev[13];
	end
	if (
		( address_expected_prev[14] !== 1'bx ) && ( address_prev[14] !== address_expected_prev[14] )
		&& ((address_expected_prev[14] !== last_address_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[14] = address_expected_prev[14];
	end
	if (
		( address_expected_prev[15] !== 1'bx ) && ( address_prev[15] !== address_expected_prev[15] )
		&& ((address_expected_prev[15] !== last_address_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[15] = address_expected_prev[15];
	end
	if (
		( address_expected_prev[16] !== 1'bx ) && ( address_prev[16] !== address_expected_prev[16] )
		&& ((address_expected_prev[16] !== last_address_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[16] = address_expected_prev[16];
	end
	if (
		( address_expected_prev[17] !== 1'bx ) && ( address_prev[17] !== address_expected_prev[17] )
		&& ((address_expected_prev[17] !== last_address_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[17] = address_expected_prev[17];
	end
	if (
		( address_expected_prev[18] !== 1'bx ) && ( address_prev[18] !== address_expected_prev[18] )
		&& ((address_expected_prev[18] !== last_address_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[18] = address_expected_prev[18];
	end
	if (
		( address_expected_prev[19] !== 1'bx ) && ( address_prev[19] !== address_expected_prev[19] )
		&& ((address_expected_prev[19] !== last_address_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[19] = address_expected_prev[19];
	end
	if (
		( address_expected_prev[20] !== 1'bx ) && ( address_prev[20] !== address_expected_prev[20] )
		&& ((address_expected_prev[20] !== last_address_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[20] = address_expected_prev[20];
	end
	if (
		( address_expected_prev[21] !== 1'bx ) && ( address_prev[21] !== address_expected_prev[21] )
		&& ((address_expected_prev[21] !== last_address_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[21] = address_expected_prev[21];
	end
	if (
		( address_expected_prev[22] !== 1'bx ) && ( address_prev[22] !== address_expected_prev[22] )
		&& ((address_expected_prev[22] !== last_address_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[22] = address_expected_prev[22];
	end
	if (
		( address_expected_prev[23] !== 1'bx ) && ( address_prev[23] !== address_expected_prev[23] )
		&& ((address_expected_prev[23] !== last_address_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[23] = address_expected_prev[23];
	end
	if (
		( address_expected_prev[24] !== 1'bx ) && ( address_prev[24] !== address_expected_prev[24] )
		&& ((address_expected_prev[24] !== last_address_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[24] = address_expected_prev[24];
	end
	if (
		( address_expected_prev[25] !== 1'bx ) && ( address_prev[25] !== address_expected_prev[25] )
		&& ((address_expected_prev[25] !== last_address_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[25] = address_expected_prev[25];
	end
	if (
		( address_expected_prev[26] !== 1'bx ) && ( address_prev[26] !== address_expected_prev[26] )
		&& ((address_expected_prev[26] !== last_address_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[26] = address_expected_prev[26];
	end
	if (
		( address_expected_prev[27] !== 1'bx ) && ( address_prev[27] !== address_expected_prev[27] )
		&& ((address_expected_prev[27] !== last_address_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[27] = address_expected_prev[27];
	end
	if (
		( address_expected_prev[28] !== 1'bx ) && ( address_prev[28] !== address_expected_prev[28] )
		&& ((address_expected_prev[28] !== last_address_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[28] = address_expected_prev[28];
	end
	if (
		( address_expected_prev[29] !== 1'bx ) && ( address_prev[29] !== address_expected_prev[29] )
		&& ((address_expected_prev[29] !== last_address_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[29] = address_expected_prev[29];
	end
	if (
		( address_expected_prev[30] !== 1'bx ) && ( address_prev[30] !== address_expected_prev[30] )
		&& ((address_expected_prev[30] !== last_address_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[30] = address_expected_prev[30];
	end
	if (
		( address_expected_prev[31] !== 1'bx ) && ( address_prev[31] !== address_expected_prev[31] )
		&& ((address_expected_prev[31] !== last_address_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port address[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", address_expected_prev);
		$display ("     Real value = %b", address_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_address_exp[31] = address_expected_prev[31];
	end
	if (
		( B_teste_expected_prev[0] !== 1'bx ) && ( B_teste_prev[0] !== B_teste_expected_prev[0] )
		&& ((B_teste_expected_prev[0] !== last_B_teste_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[0] = B_teste_expected_prev[0];
	end
	if (
		( B_teste_expected_prev[1] !== 1'bx ) && ( B_teste_prev[1] !== B_teste_expected_prev[1] )
		&& ((B_teste_expected_prev[1] !== last_B_teste_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[1] = B_teste_expected_prev[1];
	end
	if (
		( B_teste_expected_prev[2] !== 1'bx ) && ( B_teste_prev[2] !== B_teste_expected_prev[2] )
		&& ((B_teste_expected_prev[2] !== last_B_teste_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[2] = B_teste_expected_prev[2];
	end
	if (
		( B_teste_expected_prev[3] !== 1'bx ) && ( B_teste_prev[3] !== B_teste_expected_prev[3] )
		&& ((B_teste_expected_prev[3] !== last_B_teste_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[3] = B_teste_expected_prev[3];
	end
	if (
		( B_teste_expected_prev[4] !== 1'bx ) && ( B_teste_prev[4] !== B_teste_expected_prev[4] )
		&& ((B_teste_expected_prev[4] !== last_B_teste_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[4] = B_teste_expected_prev[4];
	end
	if (
		( B_teste_expected_prev[5] !== 1'bx ) && ( B_teste_prev[5] !== B_teste_expected_prev[5] )
		&& ((B_teste_expected_prev[5] !== last_B_teste_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[5] = B_teste_expected_prev[5];
	end
	if (
		( B_teste_expected_prev[6] !== 1'bx ) && ( B_teste_prev[6] !== B_teste_expected_prev[6] )
		&& ((B_teste_expected_prev[6] !== last_B_teste_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[6] = B_teste_expected_prev[6];
	end
	if (
		( B_teste_expected_prev[7] !== 1'bx ) && ( B_teste_prev[7] !== B_teste_expected_prev[7] )
		&& ((B_teste_expected_prev[7] !== last_B_teste_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[7] = B_teste_expected_prev[7];
	end
	if (
		( B_teste_expected_prev[8] !== 1'bx ) && ( B_teste_prev[8] !== B_teste_expected_prev[8] )
		&& ((B_teste_expected_prev[8] !== last_B_teste_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[8] = B_teste_expected_prev[8];
	end
	if (
		( B_teste_expected_prev[9] !== 1'bx ) && ( B_teste_prev[9] !== B_teste_expected_prev[9] )
		&& ((B_teste_expected_prev[9] !== last_B_teste_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[9] = B_teste_expected_prev[9];
	end
	if (
		( B_teste_expected_prev[10] !== 1'bx ) && ( B_teste_prev[10] !== B_teste_expected_prev[10] )
		&& ((B_teste_expected_prev[10] !== last_B_teste_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[10] = B_teste_expected_prev[10];
	end
	if (
		( B_teste_expected_prev[11] !== 1'bx ) && ( B_teste_prev[11] !== B_teste_expected_prev[11] )
		&& ((B_teste_expected_prev[11] !== last_B_teste_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[11] = B_teste_expected_prev[11];
	end
	if (
		( B_teste_expected_prev[12] !== 1'bx ) && ( B_teste_prev[12] !== B_teste_expected_prev[12] )
		&& ((B_teste_expected_prev[12] !== last_B_teste_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[12] = B_teste_expected_prev[12];
	end
	if (
		( B_teste_expected_prev[13] !== 1'bx ) && ( B_teste_prev[13] !== B_teste_expected_prev[13] )
		&& ((B_teste_expected_prev[13] !== last_B_teste_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[13] = B_teste_expected_prev[13];
	end
	if (
		( B_teste_expected_prev[14] !== 1'bx ) && ( B_teste_prev[14] !== B_teste_expected_prev[14] )
		&& ((B_teste_expected_prev[14] !== last_B_teste_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[14] = B_teste_expected_prev[14];
	end
	if (
		( B_teste_expected_prev[15] !== 1'bx ) && ( B_teste_prev[15] !== B_teste_expected_prev[15] )
		&& ((B_teste_expected_prev[15] !== last_B_teste_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[15] = B_teste_expected_prev[15];
	end
	if (
		( B_teste_expected_prev[16] !== 1'bx ) && ( B_teste_prev[16] !== B_teste_expected_prev[16] )
		&& ((B_teste_expected_prev[16] !== last_B_teste_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[16] = B_teste_expected_prev[16];
	end
	if (
		( B_teste_expected_prev[17] !== 1'bx ) && ( B_teste_prev[17] !== B_teste_expected_prev[17] )
		&& ((B_teste_expected_prev[17] !== last_B_teste_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[17] = B_teste_expected_prev[17];
	end
	if (
		( B_teste_expected_prev[18] !== 1'bx ) && ( B_teste_prev[18] !== B_teste_expected_prev[18] )
		&& ((B_teste_expected_prev[18] !== last_B_teste_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[18] = B_teste_expected_prev[18];
	end
	if (
		( B_teste_expected_prev[19] !== 1'bx ) && ( B_teste_prev[19] !== B_teste_expected_prev[19] )
		&& ((B_teste_expected_prev[19] !== last_B_teste_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[19] = B_teste_expected_prev[19];
	end
	if (
		( B_teste_expected_prev[20] !== 1'bx ) && ( B_teste_prev[20] !== B_teste_expected_prev[20] )
		&& ((B_teste_expected_prev[20] !== last_B_teste_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[20] = B_teste_expected_prev[20];
	end
	if (
		( B_teste_expected_prev[21] !== 1'bx ) && ( B_teste_prev[21] !== B_teste_expected_prev[21] )
		&& ((B_teste_expected_prev[21] !== last_B_teste_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[21] = B_teste_expected_prev[21];
	end
	if (
		( B_teste_expected_prev[22] !== 1'bx ) && ( B_teste_prev[22] !== B_teste_expected_prev[22] )
		&& ((B_teste_expected_prev[22] !== last_B_teste_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[22] = B_teste_expected_prev[22];
	end
	if (
		( B_teste_expected_prev[23] !== 1'bx ) && ( B_teste_prev[23] !== B_teste_expected_prev[23] )
		&& ((B_teste_expected_prev[23] !== last_B_teste_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[23] = B_teste_expected_prev[23];
	end
	if (
		( B_teste_expected_prev[24] !== 1'bx ) && ( B_teste_prev[24] !== B_teste_expected_prev[24] )
		&& ((B_teste_expected_prev[24] !== last_B_teste_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[24] = B_teste_expected_prev[24];
	end
	if (
		( B_teste_expected_prev[25] !== 1'bx ) && ( B_teste_prev[25] !== B_teste_expected_prev[25] )
		&& ((B_teste_expected_prev[25] !== last_B_teste_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[25] = B_teste_expected_prev[25];
	end
	if (
		( B_teste_expected_prev[26] !== 1'bx ) && ( B_teste_prev[26] !== B_teste_expected_prev[26] )
		&& ((B_teste_expected_prev[26] !== last_B_teste_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[26] = B_teste_expected_prev[26];
	end
	if (
		( B_teste_expected_prev[27] !== 1'bx ) && ( B_teste_prev[27] !== B_teste_expected_prev[27] )
		&& ((B_teste_expected_prev[27] !== last_B_teste_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[27] = B_teste_expected_prev[27];
	end
	if (
		( B_teste_expected_prev[28] !== 1'bx ) && ( B_teste_prev[28] !== B_teste_expected_prev[28] )
		&& ((B_teste_expected_prev[28] !== last_B_teste_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[28] = B_teste_expected_prev[28];
	end
	if (
		( B_teste_expected_prev[29] !== 1'bx ) && ( B_teste_prev[29] !== B_teste_expected_prev[29] )
		&& ((B_teste_expected_prev[29] !== last_B_teste_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[29] = B_teste_expected_prev[29];
	end
	if (
		( B_teste_expected_prev[30] !== 1'bx ) && ( B_teste_prev[30] !== B_teste_expected_prev[30] )
		&& ((B_teste_expected_prev[30] !== last_B_teste_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[30] = B_teste_expected_prev[30];
	end
	if (
		( B_teste_expected_prev[31] !== 1'bx ) && ( B_teste_prev[31] !== B_teste_expected_prev[31] )
		&& ((B_teste_expected_prev[31] !== last_B_teste_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_teste_expected_prev);
		$display ("     Real value = %b", B_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_B_teste_exp[31] = B_teste_expected_prev[31];
	end
	if (
		( datA_Write2_teste_expected_prev[0] !== 1'bx ) && ( datA_Write2_teste_prev[0] !== datA_Write2_teste_expected_prev[0] )
		&& ((datA_Write2_teste_expected_prev[0] !== last_datA_Write2_teste_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[0] = datA_Write2_teste_expected_prev[0];
	end
	if (
		( datA_Write2_teste_expected_prev[1] !== 1'bx ) && ( datA_Write2_teste_prev[1] !== datA_Write2_teste_expected_prev[1] )
		&& ((datA_Write2_teste_expected_prev[1] !== last_datA_Write2_teste_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[1] = datA_Write2_teste_expected_prev[1];
	end
	if (
		( datA_Write2_teste_expected_prev[2] !== 1'bx ) && ( datA_Write2_teste_prev[2] !== datA_Write2_teste_expected_prev[2] )
		&& ((datA_Write2_teste_expected_prev[2] !== last_datA_Write2_teste_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[2] = datA_Write2_teste_expected_prev[2];
	end
	if (
		( datA_Write2_teste_expected_prev[3] !== 1'bx ) && ( datA_Write2_teste_prev[3] !== datA_Write2_teste_expected_prev[3] )
		&& ((datA_Write2_teste_expected_prev[3] !== last_datA_Write2_teste_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[3] = datA_Write2_teste_expected_prev[3];
	end
	if (
		( datA_Write2_teste_expected_prev[4] !== 1'bx ) && ( datA_Write2_teste_prev[4] !== datA_Write2_teste_expected_prev[4] )
		&& ((datA_Write2_teste_expected_prev[4] !== last_datA_Write2_teste_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[4] = datA_Write2_teste_expected_prev[4];
	end
	if (
		( datA_Write2_teste_expected_prev[5] !== 1'bx ) && ( datA_Write2_teste_prev[5] !== datA_Write2_teste_expected_prev[5] )
		&& ((datA_Write2_teste_expected_prev[5] !== last_datA_Write2_teste_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[5] = datA_Write2_teste_expected_prev[5];
	end
	if (
		( datA_Write2_teste_expected_prev[6] !== 1'bx ) && ( datA_Write2_teste_prev[6] !== datA_Write2_teste_expected_prev[6] )
		&& ((datA_Write2_teste_expected_prev[6] !== last_datA_Write2_teste_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[6] = datA_Write2_teste_expected_prev[6];
	end
	if (
		( datA_Write2_teste_expected_prev[7] !== 1'bx ) && ( datA_Write2_teste_prev[7] !== datA_Write2_teste_expected_prev[7] )
		&& ((datA_Write2_teste_expected_prev[7] !== last_datA_Write2_teste_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[7] = datA_Write2_teste_expected_prev[7];
	end
	if (
		( datA_Write2_teste_expected_prev[8] !== 1'bx ) && ( datA_Write2_teste_prev[8] !== datA_Write2_teste_expected_prev[8] )
		&& ((datA_Write2_teste_expected_prev[8] !== last_datA_Write2_teste_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[8] = datA_Write2_teste_expected_prev[8];
	end
	if (
		( datA_Write2_teste_expected_prev[9] !== 1'bx ) && ( datA_Write2_teste_prev[9] !== datA_Write2_teste_expected_prev[9] )
		&& ((datA_Write2_teste_expected_prev[9] !== last_datA_Write2_teste_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[9] = datA_Write2_teste_expected_prev[9];
	end
	if (
		( datA_Write2_teste_expected_prev[10] !== 1'bx ) && ( datA_Write2_teste_prev[10] !== datA_Write2_teste_expected_prev[10] )
		&& ((datA_Write2_teste_expected_prev[10] !== last_datA_Write2_teste_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[10] = datA_Write2_teste_expected_prev[10];
	end
	if (
		( datA_Write2_teste_expected_prev[11] !== 1'bx ) && ( datA_Write2_teste_prev[11] !== datA_Write2_teste_expected_prev[11] )
		&& ((datA_Write2_teste_expected_prev[11] !== last_datA_Write2_teste_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[11] = datA_Write2_teste_expected_prev[11];
	end
	if (
		( datA_Write2_teste_expected_prev[12] !== 1'bx ) && ( datA_Write2_teste_prev[12] !== datA_Write2_teste_expected_prev[12] )
		&& ((datA_Write2_teste_expected_prev[12] !== last_datA_Write2_teste_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[12] = datA_Write2_teste_expected_prev[12];
	end
	if (
		( datA_Write2_teste_expected_prev[13] !== 1'bx ) && ( datA_Write2_teste_prev[13] !== datA_Write2_teste_expected_prev[13] )
		&& ((datA_Write2_teste_expected_prev[13] !== last_datA_Write2_teste_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[13] = datA_Write2_teste_expected_prev[13];
	end
	if (
		( datA_Write2_teste_expected_prev[14] !== 1'bx ) && ( datA_Write2_teste_prev[14] !== datA_Write2_teste_expected_prev[14] )
		&& ((datA_Write2_teste_expected_prev[14] !== last_datA_Write2_teste_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[14] = datA_Write2_teste_expected_prev[14];
	end
	if (
		( datA_Write2_teste_expected_prev[15] !== 1'bx ) && ( datA_Write2_teste_prev[15] !== datA_Write2_teste_expected_prev[15] )
		&& ((datA_Write2_teste_expected_prev[15] !== last_datA_Write2_teste_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[15] = datA_Write2_teste_expected_prev[15];
	end
	if (
		( datA_Write2_teste_expected_prev[16] !== 1'bx ) && ( datA_Write2_teste_prev[16] !== datA_Write2_teste_expected_prev[16] )
		&& ((datA_Write2_teste_expected_prev[16] !== last_datA_Write2_teste_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[16] = datA_Write2_teste_expected_prev[16];
	end
	if (
		( datA_Write2_teste_expected_prev[17] !== 1'bx ) && ( datA_Write2_teste_prev[17] !== datA_Write2_teste_expected_prev[17] )
		&& ((datA_Write2_teste_expected_prev[17] !== last_datA_Write2_teste_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[17] = datA_Write2_teste_expected_prev[17];
	end
	if (
		( datA_Write2_teste_expected_prev[18] !== 1'bx ) && ( datA_Write2_teste_prev[18] !== datA_Write2_teste_expected_prev[18] )
		&& ((datA_Write2_teste_expected_prev[18] !== last_datA_Write2_teste_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[18] = datA_Write2_teste_expected_prev[18];
	end
	if (
		( datA_Write2_teste_expected_prev[19] !== 1'bx ) && ( datA_Write2_teste_prev[19] !== datA_Write2_teste_expected_prev[19] )
		&& ((datA_Write2_teste_expected_prev[19] !== last_datA_Write2_teste_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[19] = datA_Write2_teste_expected_prev[19];
	end
	if (
		( datA_Write2_teste_expected_prev[20] !== 1'bx ) && ( datA_Write2_teste_prev[20] !== datA_Write2_teste_expected_prev[20] )
		&& ((datA_Write2_teste_expected_prev[20] !== last_datA_Write2_teste_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[20] = datA_Write2_teste_expected_prev[20];
	end
	if (
		( datA_Write2_teste_expected_prev[21] !== 1'bx ) && ( datA_Write2_teste_prev[21] !== datA_Write2_teste_expected_prev[21] )
		&& ((datA_Write2_teste_expected_prev[21] !== last_datA_Write2_teste_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[21] = datA_Write2_teste_expected_prev[21];
	end
	if (
		( datA_Write2_teste_expected_prev[22] !== 1'bx ) && ( datA_Write2_teste_prev[22] !== datA_Write2_teste_expected_prev[22] )
		&& ((datA_Write2_teste_expected_prev[22] !== last_datA_Write2_teste_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[22] = datA_Write2_teste_expected_prev[22];
	end
	if (
		( datA_Write2_teste_expected_prev[23] !== 1'bx ) && ( datA_Write2_teste_prev[23] !== datA_Write2_teste_expected_prev[23] )
		&& ((datA_Write2_teste_expected_prev[23] !== last_datA_Write2_teste_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[23] = datA_Write2_teste_expected_prev[23];
	end
	if (
		( datA_Write2_teste_expected_prev[24] !== 1'bx ) && ( datA_Write2_teste_prev[24] !== datA_Write2_teste_expected_prev[24] )
		&& ((datA_Write2_teste_expected_prev[24] !== last_datA_Write2_teste_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[24] = datA_Write2_teste_expected_prev[24];
	end
	if (
		( datA_Write2_teste_expected_prev[25] !== 1'bx ) && ( datA_Write2_teste_prev[25] !== datA_Write2_teste_expected_prev[25] )
		&& ((datA_Write2_teste_expected_prev[25] !== last_datA_Write2_teste_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[25] = datA_Write2_teste_expected_prev[25];
	end
	if (
		( datA_Write2_teste_expected_prev[26] !== 1'bx ) && ( datA_Write2_teste_prev[26] !== datA_Write2_teste_expected_prev[26] )
		&& ((datA_Write2_teste_expected_prev[26] !== last_datA_Write2_teste_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[26] = datA_Write2_teste_expected_prev[26];
	end
	if (
		( datA_Write2_teste_expected_prev[27] !== 1'bx ) && ( datA_Write2_teste_prev[27] !== datA_Write2_teste_expected_prev[27] )
		&& ((datA_Write2_teste_expected_prev[27] !== last_datA_Write2_teste_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[27] = datA_Write2_teste_expected_prev[27];
	end
	if (
		( datA_Write2_teste_expected_prev[28] !== 1'bx ) && ( datA_Write2_teste_prev[28] !== datA_Write2_teste_expected_prev[28] )
		&& ((datA_Write2_teste_expected_prev[28] !== last_datA_Write2_teste_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[28] = datA_Write2_teste_expected_prev[28];
	end
	if (
		( datA_Write2_teste_expected_prev[29] !== 1'bx ) && ( datA_Write2_teste_prev[29] !== datA_Write2_teste_expected_prev[29] )
		&& ((datA_Write2_teste_expected_prev[29] !== last_datA_Write2_teste_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[29] = datA_Write2_teste_expected_prev[29];
	end
	if (
		( datA_Write2_teste_expected_prev[30] !== 1'bx ) && ( datA_Write2_teste_prev[30] !== datA_Write2_teste_expected_prev[30] )
		&& ((datA_Write2_teste_expected_prev[30] !== last_datA_Write2_teste_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[30] = datA_Write2_teste_expected_prev[30];
	end
	if (
		( datA_Write2_teste_expected_prev[31] !== 1'bx ) && ( datA_Write2_teste_prev[31] !== datA_Write2_teste_expected_prev[31] )
		&& ((datA_Write2_teste_expected_prev[31] !== last_datA_Write2_teste_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port datA_Write2_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", datA_Write2_teste_expected_prev);
		$display ("     Real value = %b", datA_Write2_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_datA_Write2_teste_exp[31] = datA_Write2_teste_expected_prev[31];
	end
	if (
		( EnablePC_teste_expected_prev !== 1'bx ) && ( EnablePC_teste_prev !== EnablePC_teste_expected_prev )
		&& ((EnablePC_teste_expected_prev !== last_EnablePC_teste_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EnablePC_teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EnablePC_teste_expected_prev);
		$display ("     Real value = %b", EnablePC_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_EnablePC_teste_exp = EnablePC_teste_expected_prev;
	end
	if (
		( Endereco_MEM_teste_expected_prev[0] !== 1'bx ) && ( Endereco_MEM_teste_prev[0] !== Endereco_MEM_teste_expected_prev[0] )
		&& ((Endereco_MEM_teste_expected_prev[0] !== last_Endereco_MEM_teste_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[0] = Endereco_MEM_teste_expected_prev[0];
	end
	if (
		( Endereco_MEM_teste_expected_prev[1] !== 1'bx ) && ( Endereco_MEM_teste_prev[1] !== Endereco_MEM_teste_expected_prev[1] )
		&& ((Endereco_MEM_teste_expected_prev[1] !== last_Endereco_MEM_teste_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[1] = Endereco_MEM_teste_expected_prev[1];
	end
	if (
		( Endereco_MEM_teste_expected_prev[2] !== 1'bx ) && ( Endereco_MEM_teste_prev[2] !== Endereco_MEM_teste_expected_prev[2] )
		&& ((Endereco_MEM_teste_expected_prev[2] !== last_Endereco_MEM_teste_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[2] = Endereco_MEM_teste_expected_prev[2];
	end
	if (
		( Endereco_MEM_teste_expected_prev[3] !== 1'bx ) && ( Endereco_MEM_teste_prev[3] !== Endereco_MEM_teste_expected_prev[3] )
		&& ((Endereco_MEM_teste_expected_prev[3] !== last_Endereco_MEM_teste_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[3] = Endereco_MEM_teste_expected_prev[3];
	end
	if (
		( Endereco_MEM_teste_expected_prev[4] !== 1'bx ) && ( Endereco_MEM_teste_prev[4] !== Endereco_MEM_teste_expected_prev[4] )
		&& ((Endereco_MEM_teste_expected_prev[4] !== last_Endereco_MEM_teste_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[4] = Endereco_MEM_teste_expected_prev[4];
	end
	if (
		( Endereco_MEM_teste_expected_prev[5] !== 1'bx ) && ( Endereco_MEM_teste_prev[5] !== Endereco_MEM_teste_expected_prev[5] )
		&& ((Endereco_MEM_teste_expected_prev[5] !== last_Endereco_MEM_teste_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[5] = Endereco_MEM_teste_expected_prev[5];
	end
	if (
		( Endereco_MEM_teste_expected_prev[6] !== 1'bx ) && ( Endereco_MEM_teste_prev[6] !== Endereco_MEM_teste_expected_prev[6] )
		&& ((Endereco_MEM_teste_expected_prev[6] !== last_Endereco_MEM_teste_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[6] = Endereco_MEM_teste_expected_prev[6];
	end
	if (
		( Endereco_MEM_teste_expected_prev[7] !== 1'bx ) && ( Endereco_MEM_teste_prev[7] !== Endereco_MEM_teste_expected_prev[7] )
		&& ((Endereco_MEM_teste_expected_prev[7] !== last_Endereco_MEM_teste_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[7] = Endereco_MEM_teste_expected_prev[7];
	end
	if (
		( Endereco_MEM_teste_expected_prev[8] !== 1'bx ) && ( Endereco_MEM_teste_prev[8] !== Endereco_MEM_teste_expected_prev[8] )
		&& ((Endereco_MEM_teste_expected_prev[8] !== last_Endereco_MEM_teste_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[8] = Endereco_MEM_teste_expected_prev[8];
	end
	if (
		( Endereco_MEM_teste_expected_prev[9] !== 1'bx ) && ( Endereco_MEM_teste_prev[9] !== Endereco_MEM_teste_expected_prev[9] )
		&& ((Endereco_MEM_teste_expected_prev[9] !== last_Endereco_MEM_teste_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[9] = Endereco_MEM_teste_expected_prev[9];
	end
	if (
		( Endereco_MEM_teste_expected_prev[10] !== 1'bx ) && ( Endereco_MEM_teste_prev[10] !== Endereco_MEM_teste_expected_prev[10] )
		&& ((Endereco_MEM_teste_expected_prev[10] !== last_Endereco_MEM_teste_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[10] = Endereco_MEM_teste_expected_prev[10];
	end
	if (
		( Endereco_MEM_teste_expected_prev[11] !== 1'bx ) && ( Endereco_MEM_teste_prev[11] !== Endereco_MEM_teste_expected_prev[11] )
		&& ((Endereco_MEM_teste_expected_prev[11] !== last_Endereco_MEM_teste_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[11] = Endereco_MEM_teste_expected_prev[11];
	end
	if (
		( Endereco_MEM_teste_expected_prev[12] !== 1'bx ) && ( Endereco_MEM_teste_prev[12] !== Endereco_MEM_teste_expected_prev[12] )
		&& ((Endereco_MEM_teste_expected_prev[12] !== last_Endereco_MEM_teste_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[12] = Endereco_MEM_teste_expected_prev[12];
	end
	if (
		( Endereco_MEM_teste_expected_prev[13] !== 1'bx ) && ( Endereco_MEM_teste_prev[13] !== Endereco_MEM_teste_expected_prev[13] )
		&& ((Endereco_MEM_teste_expected_prev[13] !== last_Endereco_MEM_teste_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[13] = Endereco_MEM_teste_expected_prev[13];
	end
	if (
		( Endereco_MEM_teste_expected_prev[14] !== 1'bx ) && ( Endereco_MEM_teste_prev[14] !== Endereco_MEM_teste_expected_prev[14] )
		&& ((Endereco_MEM_teste_expected_prev[14] !== last_Endereco_MEM_teste_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[14] = Endereco_MEM_teste_expected_prev[14];
	end
	if (
		( Endereco_MEM_teste_expected_prev[15] !== 1'bx ) && ( Endereco_MEM_teste_prev[15] !== Endereco_MEM_teste_expected_prev[15] )
		&& ((Endereco_MEM_teste_expected_prev[15] !== last_Endereco_MEM_teste_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[15] = Endereco_MEM_teste_expected_prev[15];
	end
	if (
		( Endereco_MEM_teste_expected_prev[16] !== 1'bx ) && ( Endereco_MEM_teste_prev[16] !== Endereco_MEM_teste_expected_prev[16] )
		&& ((Endereco_MEM_teste_expected_prev[16] !== last_Endereco_MEM_teste_exp[16]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[16] = Endereco_MEM_teste_expected_prev[16];
	end
	if (
		( Endereco_MEM_teste_expected_prev[17] !== 1'bx ) && ( Endereco_MEM_teste_prev[17] !== Endereco_MEM_teste_expected_prev[17] )
		&& ((Endereco_MEM_teste_expected_prev[17] !== last_Endereco_MEM_teste_exp[17]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[17] = Endereco_MEM_teste_expected_prev[17];
	end
	if (
		( Endereco_MEM_teste_expected_prev[18] !== 1'bx ) && ( Endereco_MEM_teste_prev[18] !== Endereco_MEM_teste_expected_prev[18] )
		&& ((Endereco_MEM_teste_expected_prev[18] !== last_Endereco_MEM_teste_exp[18]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[18] = Endereco_MEM_teste_expected_prev[18];
	end
	if (
		( Endereco_MEM_teste_expected_prev[19] !== 1'bx ) && ( Endereco_MEM_teste_prev[19] !== Endereco_MEM_teste_expected_prev[19] )
		&& ((Endereco_MEM_teste_expected_prev[19] !== last_Endereco_MEM_teste_exp[19]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[19] = Endereco_MEM_teste_expected_prev[19];
	end
	if (
		( Endereco_MEM_teste_expected_prev[20] !== 1'bx ) && ( Endereco_MEM_teste_prev[20] !== Endereco_MEM_teste_expected_prev[20] )
		&& ((Endereco_MEM_teste_expected_prev[20] !== last_Endereco_MEM_teste_exp[20]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[20] = Endereco_MEM_teste_expected_prev[20];
	end
	if (
		( Endereco_MEM_teste_expected_prev[21] !== 1'bx ) && ( Endereco_MEM_teste_prev[21] !== Endereco_MEM_teste_expected_prev[21] )
		&& ((Endereco_MEM_teste_expected_prev[21] !== last_Endereco_MEM_teste_exp[21]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[21] = Endereco_MEM_teste_expected_prev[21];
	end
	if (
		( Endereco_MEM_teste_expected_prev[22] !== 1'bx ) && ( Endereco_MEM_teste_prev[22] !== Endereco_MEM_teste_expected_prev[22] )
		&& ((Endereco_MEM_teste_expected_prev[22] !== last_Endereco_MEM_teste_exp[22]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[22] = Endereco_MEM_teste_expected_prev[22];
	end
	if (
		( Endereco_MEM_teste_expected_prev[23] !== 1'bx ) && ( Endereco_MEM_teste_prev[23] !== Endereco_MEM_teste_expected_prev[23] )
		&& ((Endereco_MEM_teste_expected_prev[23] !== last_Endereco_MEM_teste_exp[23]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[23] = Endereco_MEM_teste_expected_prev[23];
	end
	if (
		( Endereco_MEM_teste_expected_prev[24] !== 1'bx ) && ( Endereco_MEM_teste_prev[24] !== Endereco_MEM_teste_expected_prev[24] )
		&& ((Endereco_MEM_teste_expected_prev[24] !== last_Endereco_MEM_teste_exp[24]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[24] = Endereco_MEM_teste_expected_prev[24];
	end
	if (
		( Endereco_MEM_teste_expected_prev[25] !== 1'bx ) && ( Endereco_MEM_teste_prev[25] !== Endereco_MEM_teste_expected_prev[25] )
		&& ((Endereco_MEM_teste_expected_prev[25] !== last_Endereco_MEM_teste_exp[25]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[25] = Endereco_MEM_teste_expected_prev[25];
	end
	if (
		( Endereco_MEM_teste_expected_prev[26] !== 1'bx ) && ( Endereco_MEM_teste_prev[26] !== Endereco_MEM_teste_expected_prev[26] )
		&& ((Endereco_MEM_teste_expected_prev[26] !== last_Endereco_MEM_teste_exp[26]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[26] = Endereco_MEM_teste_expected_prev[26];
	end
	if (
		( Endereco_MEM_teste_expected_prev[27] !== 1'bx ) && ( Endereco_MEM_teste_prev[27] !== Endereco_MEM_teste_expected_prev[27] )
		&& ((Endereco_MEM_teste_expected_prev[27] !== last_Endereco_MEM_teste_exp[27]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[27] = Endereco_MEM_teste_expected_prev[27];
	end
	if (
		( Endereco_MEM_teste_expected_prev[28] !== 1'bx ) && ( Endereco_MEM_teste_prev[28] !== Endereco_MEM_teste_expected_prev[28] )
		&& ((Endereco_MEM_teste_expected_prev[28] !== last_Endereco_MEM_teste_exp[28]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[28] = Endereco_MEM_teste_expected_prev[28];
	end
	if (
		( Endereco_MEM_teste_expected_prev[29] !== 1'bx ) && ( Endereco_MEM_teste_prev[29] !== Endereco_MEM_teste_expected_prev[29] )
		&& ((Endereco_MEM_teste_expected_prev[29] !== last_Endereco_MEM_teste_exp[29]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[29] = Endereco_MEM_teste_expected_prev[29];
	end
	if (
		( Endereco_MEM_teste_expected_prev[30] !== 1'bx ) && ( Endereco_MEM_teste_prev[30] !== Endereco_MEM_teste_expected_prev[30] )
		&& ((Endereco_MEM_teste_expected_prev[30] !== last_Endereco_MEM_teste_exp[30]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[30] = Endereco_MEM_teste_expected_prev[30];
	end
	if (
		( Endereco_MEM_teste_expected_prev[31] !== 1'bx ) && ( Endereco_MEM_teste_prev[31] !== Endereco_MEM_teste_expected_prev[31] )
		&& ((Endereco_MEM_teste_expected_prev[31] !== last_Endereco_MEM_teste_exp[31]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Endereco_MEM_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Endereco_MEM_teste_expected_prev);
		$display ("     Real value = %b", Endereco_MEM_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Endereco_MEM_teste_exp[31] = Endereco_MEM_teste_expected_prev[31];
	end
	if (
		( EscreveReg_teste_expected_prev !== 1'bx ) && ( EscreveReg_teste_prev !== EscreveReg_teste_expected_prev )
		&& ((EscreveReg_teste_expected_prev !== last_EscreveReg_teste_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port EscreveReg_teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", EscreveReg_teste_expected_prev);
		$display ("     Real value = %b", EscreveReg_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_EscreveReg_teste_exp = EscreveReg_teste_expected_prev;
	end
	if (
		( imm_expected_prev[0] !== 1'bx ) && ( imm_prev[0] !== imm_expected_prev[0] )
		&& ((imm_expected_prev[0] !== last_imm_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[0] = imm_expected_prev[0];
	end
	if (
		( imm_expected_prev[1] !== 1'bx ) && ( imm_prev[1] !== imm_expected_prev[1] )
		&& ((imm_expected_prev[1] !== last_imm_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[1] = imm_expected_prev[1];
	end
	if (
		( imm_expected_prev[2] !== 1'bx ) && ( imm_prev[2] !== imm_expected_prev[2] )
		&& ((imm_expected_prev[2] !== last_imm_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[2] = imm_expected_prev[2];
	end
	if (
		( imm_expected_prev[3] !== 1'bx ) && ( imm_prev[3] !== imm_expected_prev[3] )
		&& ((imm_expected_prev[3] !== last_imm_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[3] = imm_expected_prev[3];
	end
	if (
		( imm_expected_prev[4] !== 1'bx ) && ( imm_prev[4] !== imm_expected_prev[4] )
		&& ((imm_expected_prev[4] !== last_imm_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[4] = imm_expected_prev[4];
	end
	if (
		( imm_expected_prev[5] !== 1'bx ) && ( imm_prev[5] !== imm_expected_prev[5] )
		&& ((imm_expected_prev[5] !== last_imm_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[5] = imm_expected_prev[5];
	end
	if (
		( imm_expected_prev[6] !== 1'bx ) && ( imm_prev[6] !== imm_expected_prev[6] )
		&& ((imm_expected_prev[6] !== last_imm_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[6] = imm_expected_prev[6];
	end
	if (
		( imm_expected_prev[7] !== 1'bx ) && ( imm_prev[7] !== imm_expected_prev[7] )
		&& ((imm_expected_prev[7] !== last_imm_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[7] = imm_expected_prev[7];
	end
	if (
		( imm_expected_prev[8] !== 1'bx ) && ( imm_prev[8] !== imm_expected_prev[8] )
		&& ((imm_expected_prev[8] !== last_imm_exp[8]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[8] = imm_expected_prev[8];
	end
	if (
		( imm_expected_prev[9] !== 1'bx ) && ( imm_prev[9] !== imm_expected_prev[9] )
		&& ((imm_expected_prev[9] !== last_imm_exp[9]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[9] = imm_expected_prev[9];
	end
	if (
		( imm_expected_prev[10] !== 1'bx ) && ( imm_prev[10] !== imm_expected_prev[10] )
		&& ((imm_expected_prev[10] !== last_imm_exp[10]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[10] = imm_expected_prev[10];
	end
	if (
		( imm_expected_prev[11] !== 1'bx ) && ( imm_prev[11] !== imm_expected_prev[11] )
		&& ((imm_expected_prev[11] !== last_imm_exp[11]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[11] = imm_expected_prev[11];
	end
	if (
		( imm_expected_prev[12] !== 1'bx ) && ( imm_prev[12] !== imm_expected_prev[12] )
		&& ((imm_expected_prev[12] !== last_imm_exp[12]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[12] = imm_expected_prev[12];
	end
	if (
		( imm_expected_prev[13] !== 1'bx ) && ( imm_prev[13] !== imm_expected_prev[13] )
		&& ((imm_expected_prev[13] !== last_imm_exp[13]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[13] = imm_expected_prev[13];
	end
	if (
		( imm_expected_prev[14] !== 1'bx ) && ( imm_prev[14] !== imm_expected_prev[14] )
		&& ((imm_expected_prev[14] !== last_imm_exp[14]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[14] = imm_expected_prev[14];
	end
	if (
		( imm_expected_prev[15] !== 1'bx ) && ( imm_prev[15] !== imm_expected_prev[15] )
		&& ((imm_expected_prev[15] !== last_imm_exp[15]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port imm[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", imm_expected_prev);
		$display ("     Real value = %b", imm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_imm_exp[15] = imm_expected_prev[15];
	end
	if (
		( instruction_expected_prev[0] !== 1'bx ) && ( instruction_prev[0] !== instruction_expected_prev[0] )
		&& ((instruction_expected_prev[0] !== last_instruction_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[0] = instruction_expected_prev[0];
	end
	if (
		( instruction_expected_prev[1] !== 1'bx ) && ( instruction_prev[1] !== instruction_expected_prev[1] )
		&& ((instruction_expected_prev[1] !== last_instruction_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[1] = instruction_expected_prev[1];
	end
	if (
		( instruction_expected_prev[2] !== 1'bx ) && ( instruction_prev[2] !== instruction_expected_prev[2] )
		&& ((instruction_expected_prev[2] !== last_instruction_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[2] = instruction_expected_prev[2];
	end
	if (
		( instruction_expected_prev[3] !== 1'bx ) && ( instruction_prev[3] !== instruction_expected_prev[3] )
		&& ((instruction_expected_prev[3] !== last_instruction_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[3] = instruction_expected_prev[3];
	end
	if (
		( instruction_expected_prev[4] !== 1'bx ) && ( instruction_prev[4] !== instruction_expected_prev[4] )
		&& ((instruction_expected_prev[4] !== last_instruction_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[4] = instruction_expected_prev[4];
	end
	if (
		( instruction_expected_prev[5] !== 1'bx ) && ( instruction_prev[5] !== instruction_expected_prev[5] )
		&& ((instruction_expected_prev[5] !== last_instruction_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[5] = instruction_expected_prev[5];
	end
	if (
		( instruction_expected_prev[6] !== 1'bx ) && ( instruction_prev[6] !== instruction_expected_prev[6] )
		&& ((instruction_expected_prev[6] !== last_instruction_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[6] = instruction_expected_prev[6];
	end
	if (
		( instruction_expected_prev[7] !== 1'bx ) && ( instruction_prev[7] !== instruction_expected_prev[7] )
		&& ((instruction_expected_prev[7] !== last_instruction_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[7] = instruction_expected_prev[7];
	end
	if (
		( instruction_expected_prev[8] !== 1'bx ) && ( instruction_prev[8] !== instruction_expected_prev[8] )
		&& ((instruction_expected_prev[8] !== last_instruction_exp[8]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[8] = instruction_expected_prev[8];
	end
	if (
		( instruction_expected_prev[9] !== 1'bx ) && ( instruction_prev[9] !== instruction_expected_prev[9] )
		&& ((instruction_expected_prev[9] !== last_instruction_exp[9]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[9] = instruction_expected_prev[9];
	end
	if (
		( instruction_expected_prev[10] !== 1'bx ) && ( instruction_prev[10] !== instruction_expected_prev[10] )
		&& ((instruction_expected_prev[10] !== last_instruction_exp[10]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[10] = instruction_expected_prev[10];
	end
	if (
		( instruction_expected_prev[11] !== 1'bx ) && ( instruction_prev[11] !== instruction_expected_prev[11] )
		&& ((instruction_expected_prev[11] !== last_instruction_exp[11]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[11] = instruction_expected_prev[11];
	end
	if (
		( instruction_expected_prev[12] !== 1'bx ) && ( instruction_prev[12] !== instruction_expected_prev[12] )
		&& ((instruction_expected_prev[12] !== last_instruction_exp[12]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[12] = instruction_expected_prev[12];
	end
	if (
		( instruction_expected_prev[13] !== 1'bx ) && ( instruction_prev[13] !== instruction_expected_prev[13] )
		&& ((instruction_expected_prev[13] !== last_instruction_exp[13]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[13] = instruction_expected_prev[13];
	end
	if (
		( instruction_expected_prev[14] !== 1'bx ) && ( instruction_prev[14] !== instruction_expected_prev[14] )
		&& ((instruction_expected_prev[14] !== last_instruction_exp[14]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[14] = instruction_expected_prev[14];
	end
	if (
		( instruction_expected_prev[15] !== 1'bx ) && ( instruction_prev[15] !== instruction_expected_prev[15] )
		&& ((instruction_expected_prev[15] !== last_instruction_exp[15]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[15] = instruction_expected_prev[15];
	end
	if (
		( instruction_expected_prev[16] !== 1'bx ) && ( instruction_prev[16] !== instruction_expected_prev[16] )
		&& ((instruction_expected_prev[16] !== last_instruction_exp[16]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[16] = instruction_expected_prev[16];
	end
	if (
		( instruction_expected_prev[17] !== 1'bx ) && ( instruction_prev[17] !== instruction_expected_prev[17] )
		&& ((instruction_expected_prev[17] !== last_instruction_exp[17]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[17] = instruction_expected_prev[17];
	end
	if (
		( instruction_expected_prev[18] !== 1'bx ) && ( instruction_prev[18] !== instruction_expected_prev[18] )
		&& ((instruction_expected_prev[18] !== last_instruction_exp[18]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[18] = instruction_expected_prev[18];
	end
	if (
		( instruction_expected_prev[19] !== 1'bx ) && ( instruction_prev[19] !== instruction_expected_prev[19] )
		&& ((instruction_expected_prev[19] !== last_instruction_exp[19]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[19] = instruction_expected_prev[19];
	end
	if (
		( instruction_expected_prev[20] !== 1'bx ) && ( instruction_prev[20] !== instruction_expected_prev[20] )
		&& ((instruction_expected_prev[20] !== last_instruction_exp[20]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[20] = instruction_expected_prev[20];
	end
	if (
		( instruction_expected_prev[21] !== 1'bx ) && ( instruction_prev[21] !== instruction_expected_prev[21] )
		&& ((instruction_expected_prev[21] !== last_instruction_exp[21]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[21] = instruction_expected_prev[21];
	end
	if (
		( instruction_expected_prev[22] !== 1'bx ) && ( instruction_prev[22] !== instruction_expected_prev[22] )
		&& ((instruction_expected_prev[22] !== last_instruction_exp[22]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[22] = instruction_expected_prev[22];
	end
	if (
		( instruction_expected_prev[23] !== 1'bx ) && ( instruction_prev[23] !== instruction_expected_prev[23] )
		&& ((instruction_expected_prev[23] !== last_instruction_exp[23]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[23] = instruction_expected_prev[23];
	end
	if (
		( instruction_expected_prev[24] !== 1'bx ) && ( instruction_prev[24] !== instruction_expected_prev[24] )
		&& ((instruction_expected_prev[24] !== last_instruction_exp[24]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[24] = instruction_expected_prev[24];
	end
	if (
		( instruction_expected_prev[25] !== 1'bx ) && ( instruction_prev[25] !== instruction_expected_prev[25] )
		&& ((instruction_expected_prev[25] !== last_instruction_exp[25]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[25] = instruction_expected_prev[25];
	end
	if (
		( instruction_expected_prev[26] !== 1'bx ) && ( instruction_prev[26] !== instruction_expected_prev[26] )
		&& ((instruction_expected_prev[26] !== last_instruction_exp[26]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[26] = instruction_expected_prev[26];
	end
	if (
		( instruction_expected_prev[27] !== 1'bx ) && ( instruction_prev[27] !== instruction_expected_prev[27] )
		&& ((instruction_expected_prev[27] !== last_instruction_exp[27]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[27] = instruction_expected_prev[27];
	end
	if (
		( instruction_expected_prev[28] !== 1'bx ) && ( instruction_prev[28] !== instruction_expected_prev[28] )
		&& ((instruction_expected_prev[28] !== last_instruction_exp[28]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[28] = instruction_expected_prev[28];
	end
	if (
		( instruction_expected_prev[29] !== 1'bx ) && ( instruction_prev[29] !== instruction_expected_prev[29] )
		&& ((instruction_expected_prev[29] !== last_instruction_exp[29]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[29] = instruction_expected_prev[29];
	end
	if (
		( instruction_expected_prev[30] !== 1'bx ) && ( instruction_prev[30] !== instruction_expected_prev[30] )
		&& ((instruction_expected_prev[30] !== last_instruction_exp[30]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[30] = instruction_expected_prev[30];
	end
	if (
		( instruction_expected_prev[31] !== 1'bx ) && ( instruction_prev[31] !== instruction_expected_prev[31] )
		&& ((instruction_expected_prev[31] !== last_instruction_exp[31]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port instruction[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", instruction_expected_prev);
		$display ("     Real value = %b", instruction_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_instruction_exp[31] = instruction_expected_prev[31];
	end
	if (
		( is_bgez_teste_expected_prev !== 1'bx ) && ( is_bgez_teste_prev !== is_bgez_teste_expected_prev )
		&& ((is_bgez_teste_expected_prev !== last_is_bgez_teste_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port is_bgez_teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", is_bgez_teste_expected_prev);
		$display ("     Real value = %b", is_bgez_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_is_bgez_teste_exp = is_bgez_teste_expected_prev;
	end
	if (
		( louD_teste_expected_prev !== 1'bx ) && ( louD_teste_prev !== louD_teste_expected_prev )
		&& ((louD_teste_expected_prev !== last_louD_teste_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port louD_teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", louD_teste_expected_prev);
		$display ("     Real value = %b", louD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_louD_teste_exp = louD_teste_expected_prev;
	end
	if (
		( MemparaReg_teste_expected_prev !== 1'bx ) && ( MemparaReg_teste_prev !== MemparaReg_teste_expected_prev )
		&& ((MemparaReg_teste_expected_prev !== last_MemparaReg_teste_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MemparaReg_teste :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MemparaReg_teste_expected_prev);
		$display ("     Real value = %b", MemparaReg_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_MemparaReg_teste_exp = MemparaReg_teste_expected_prev;
	end
	if (
		( op_alu_test_expected_prev[0] !== 1'bx ) && ( op_alu_test_prev[0] !== op_alu_test_expected_prev[0] )
		&& ((op_alu_test_expected_prev[0] !== last_op_alu_test_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_alu_test[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_alu_test_expected_prev);
		$display ("     Real value = %b", op_alu_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_op_alu_test_exp[0] = op_alu_test_expected_prev[0];
	end
	if (
		( op_alu_test_expected_prev[1] !== 1'bx ) && ( op_alu_test_prev[1] !== op_alu_test_expected_prev[1] )
		&& ((op_alu_test_expected_prev[1] !== last_op_alu_test_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_alu_test[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_alu_test_expected_prev);
		$display ("     Real value = %b", op_alu_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_op_alu_test_exp[1] = op_alu_test_expected_prev[1];
	end
	if (
		( op_alu_test_expected_prev[2] !== 1'bx ) && ( op_alu_test_prev[2] !== op_alu_test_expected_prev[2] )
		&& ((op_alu_test_expected_prev[2] !== last_op_alu_test_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_alu_test[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_alu_test_expected_prev);
		$display ("     Real value = %b", op_alu_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_op_alu_test_exp[2] = op_alu_test_expected_prev[2];
	end
	if (
		( op_alu_test_expected_prev[3] !== 1'bx ) && ( op_alu_test_prev[3] !== op_alu_test_expected_prev[3] )
		&& ((op_alu_test_expected_prev[3] !== last_op_alu_test_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port op_alu_test[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", op_alu_test_expected_prev);
		$display ("     Real value = %b", op_alu_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_op_alu_test_exp[3] = op_alu_test_expected_prev[3];
	end
	if (
		( OrigBAlu_teste_expected_prev[0] !== 1'bx ) && ( OrigBAlu_teste_prev[0] !== OrigBAlu_teste_expected_prev[0] )
		&& ((OrigBAlu_teste_expected_prev[0] !== last_OrigBAlu_teste_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OrigBAlu_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OrigBAlu_teste_expected_prev);
		$display ("     Real value = %b", OrigBAlu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_OrigBAlu_teste_exp[0] = OrigBAlu_teste_expected_prev[0];
	end
	if (
		( OrigBAlu_teste_expected_prev[1] !== 1'bx ) && ( OrigBAlu_teste_prev[1] !== OrigBAlu_teste_expected_prev[1] )
		&& ((OrigBAlu_teste_expected_prev[1] !== last_OrigBAlu_teste_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OrigBAlu_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OrigBAlu_teste_expected_prev);
		$display ("     Real value = %b", OrigBAlu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_OrigBAlu_teste_exp[1] = OrigBAlu_teste_expected_prev[1];
	end
	if (
		( RD_teste_expected_prev[0] !== 1'bx ) && ( RD_teste_prev[0] !== RD_teste_expected_prev[0] )
		&& ((RD_teste_expected_prev[0] !== last_RD_teste_exp[0]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_teste_expected_prev);
		$display ("     Real value = %b", RD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RD_teste_exp[0] = RD_teste_expected_prev[0];
	end
	if (
		( RD_teste_expected_prev[1] !== 1'bx ) && ( RD_teste_prev[1] !== RD_teste_expected_prev[1] )
		&& ((RD_teste_expected_prev[1] !== last_RD_teste_exp[1]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_teste_expected_prev);
		$display ("     Real value = %b", RD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RD_teste_exp[1] = RD_teste_expected_prev[1];
	end
	if (
		( RD_teste_expected_prev[2] !== 1'bx ) && ( RD_teste_prev[2] !== RD_teste_expected_prev[2] )
		&& ((RD_teste_expected_prev[2] !== last_RD_teste_exp[2]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_teste_expected_prev);
		$display ("     Real value = %b", RD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RD_teste_exp[2] = RD_teste_expected_prev[2];
	end
	if (
		( RD_teste_expected_prev[3] !== 1'bx ) && ( RD_teste_prev[3] !== RD_teste_expected_prev[3] )
		&& ((RD_teste_expected_prev[3] !== last_RD_teste_exp[3]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_teste_expected_prev);
		$display ("     Real value = %b", RD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RD_teste_exp[3] = RD_teste_expected_prev[3];
	end
	if (
		( RD_teste_expected_prev[4] !== 1'bx ) && ( RD_teste_prev[4] !== RD_teste_expected_prev[4] )
		&& ((RD_teste_expected_prev[4] !== last_RD_teste_exp[4]) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RD_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RD_teste_expected_prev);
		$display ("     Real value = %b", RD_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RD_teste_exp[4] = RD_teste_expected_prev[4];
	end
	if (
		( RDM_out_teste_expected_prev[0] !== 1'bx ) && ( RDM_out_teste_prev[0] !== RDM_out_teste_expected_prev[0] )
		&& ((RDM_out_teste_expected_prev[0] !== last_RDM_out_teste_exp[0]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[0] = RDM_out_teste_expected_prev[0];
	end
	if (
		( RDM_out_teste_expected_prev[1] !== 1'bx ) && ( RDM_out_teste_prev[1] !== RDM_out_teste_expected_prev[1] )
		&& ((RDM_out_teste_expected_prev[1] !== last_RDM_out_teste_exp[1]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[1] = RDM_out_teste_expected_prev[1];
	end
	if (
		( RDM_out_teste_expected_prev[2] !== 1'bx ) && ( RDM_out_teste_prev[2] !== RDM_out_teste_expected_prev[2] )
		&& ((RDM_out_teste_expected_prev[2] !== last_RDM_out_teste_exp[2]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[2] = RDM_out_teste_expected_prev[2];
	end
	if (
		( RDM_out_teste_expected_prev[3] !== 1'bx ) && ( RDM_out_teste_prev[3] !== RDM_out_teste_expected_prev[3] )
		&& ((RDM_out_teste_expected_prev[3] !== last_RDM_out_teste_exp[3]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[3] = RDM_out_teste_expected_prev[3];
	end
	if (
		( RDM_out_teste_expected_prev[4] !== 1'bx ) && ( RDM_out_teste_prev[4] !== RDM_out_teste_expected_prev[4] )
		&& ((RDM_out_teste_expected_prev[4] !== last_RDM_out_teste_exp[4]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[4] = RDM_out_teste_expected_prev[4];
	end
	if (
		( RDM_out_teste_expected_prev[5] !== 1'bx ) && ( RDM_out_teste_prev[5] !== RDM_out_teste_expected_prev[5] )
		&& ((RDM_out_teste_expected_prev[5] !== last_RDM_out_teste_exp[5]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[5] = RDM_out_teste_expected_prev[5];
	end
	if (
		( RDM_out_teste_expected_prev[6] !== 1'bx ) && ( RDM_out_teste_prev[6] !== RDM_out_teste_expected_prev[6] )
		&& ((RDM_out_teste_expected_prev[6] !== last_RDM_out_teste_exp[6]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[6] = RDM_out_teste_expected_prev[6];
	end
	if (
		( RDM_out_teste_expected_prev[7] !== 1'bx ) && ( RDM_out_teste_prev[7] !== RDM_out_teste_expected_prev[7] )
		&& ((RDM_out_teste_expected_prev[7] !== last_RDM_out_teste_exp[7]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[7] = RDM_out_teste_expected_prev[7];
	end
	if (
		( RDM_out_teste_expected_prev[8] !== 1'bx ) && ( RDM_out_teste_prev[8] !== RDM_out_teste_expected_prev[8] )
		&& ((RDM_out_teste_expected_prev[8] !== last_RDM_out_teste_exp[8]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[8] = RDM_out_teste_expected_prev[8];
	end
	if (
		( RDM_out_teste_expected_prev[9] !== 1'bx ) && ( RDM_out_teste_prev[9] !== RDM_out_teste_expected_prev[9] )
		&& ((RDM_out_teste_expected_prev[9] !== last_RDM_out_teste_exp[9]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[9] = RDM_out_teste_expected_prev[9];
	end
	if (
		( RDM_out_teste_expected_prev[10] !== 1'bx ) && ( RDM_out_teste_prev[10] !== RDM_out_teste_expected_prev[10] )
		&& ((RDM_out_teste_expected_prev[10] !== last_RDM_out_teste_exp[10]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[10] = RDM_out_teste_expected_prev[10];
	end
	if (
		( RDM_out_teste_expected_prev[11] !== 1'bx ) && ( RDM_out_teste_prev[11] !== RDM_out_teste_expected_prev[11] )
		&& ((RDM_out_teste_expected_prev[11] !== last_RDM_out_teste_exp[11]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[11] = RDM_out_teste_expected_prev[11];
	end
	if (
		( RDM_out_teste_expected_prev[12] !== 1'bx ) && ( RDM_out_teste_prev[12] !== RDM_out_teste_expected_prev[12] )
		&& ((RDM_out_teste_expected_prev[12] !== last_RDM_out_teste_exp[12]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[12] = RDM_out_teste_expected_prev[12];
	end
	if (
		( RDM_out_teste_expected_prev[13] !== 1'bx ) && ( RDM_out_teste_prev[13] !== RDM_out_teste_expected_prev[13] )
		&& ((RDM_out_teste_expected_prev[13] !== last_RDM_out_teste_exp[13]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[13] = RDM_out_teste_expected_prev[13];
	end
	if (
		( RDM_out_teste_expected_prev[14] !== 1'bx ) && ( RDM_out_teste_prev[14] !== RDM_out_teste_expected_prev[14] )
		&& ((RDM_out_teste_expected_prev[14] !== last_RDM_out_teste_exp[14]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[14] = RDM_out_teste_expected_prev[14];
	end
	if (
		( RDM_out_teste_expected_prev[15] !== 1'bx ) && ( RDM_out_teste_prev[15] !== RDM_out_teste_expected_prev[15] )
		&& ((RDM_out_teste_expected_prev[15] !== last_RDM_out_teste_exp[15]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[15] = RDM_out_teste_expected_prev[15];
	end
	if (
		( RDM_out_teste_expected_prev[16] !== 1'bx ) && ( RDM_out_teste_prev[16] !== RDM_out_teste_expected_prev[16] )
		&& ((RDM_out_teste_expected_prev[16] !== last_RDM_out_teste_exp[16]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[16] = RDM_out_teste_expected_prev[16];
	end
	if (
		( RDM_out_teste_expected_prev[17] !== 1'bx ) && ( RDM_out_teste_prev[17] !== RDM_out_teste_expected_prev[17] )
		&& ((RDM_out_teste_expected_prev[17] !== last_RDM_out_teste_exp[17]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[17] = RDM_out_teste_expected_prev[17];
	end
	if (
		( RDM_out_teste_expected_prev[18] !== 1'bx ) && ( RDM_out_teste_prev[18] !== RDM_out_teste_expected_prev[18] )
		&& ((RDM_out_teste_expected_prev[18] !== last_RDM_out_teste_exp[18]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[18] = RDM_out_teste_expected_prev[18];
	end
	if (
		( RDM_out_teste_expected_prev[19] !== 1'bx ) && ( RDM_out_teste_prev[19] !== RDM_out_teste_expected_prev[19] )
		&& ((RDM_out_teste_expected_prev[19] !== last_RDM_out_teste_exp[19]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[19] = RDM_out_teste_expected_prev[19];
	end
	if (
		( RDM_out_teste_expected_prev[20] !== 1'bx ) && ( RDM_out_teste_prev[20] !== RDM_out_teste_expected_prev[20] )
		&& ((RDM_out_teste_expected_prev[20] !== last_RDM_out_teste_exp[20]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[20] = RDM_out_teste_expected_prev[20];
	end
	if (
		( RDM_out_teste_expected_prev[21] !== 1'bx ) && ( RDM_out_teste_prev[21] !== RDM_out_teste_expected_prev[21] )
		&& ((RDM_out_teste_expected_prev[21] !== last_RDM_out_teste_exp[21]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[21] = RDM_out_teste_expected_prev[21];
	end
	if (
		( RDM_out_teste_expected_prev[22] !== 1'bx ) && ( RDM_out_teste_prev[22] !== RDM_out_teste_expected_prev[22] )
		&& ((RDM_out_teste_expected_prev[22] !== last_RDM_out_teste_exp[22]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[22] = RDM_out_teste_expected_prev[22];
	end
	if (
		( RDM_out_teste_expected_prev[23] !== 1'bx ) && ( RDM_out_teste_prev[23] !== RDM_out_teste_expected_prev[23] )
		&& ((RDM_out_teste_expected_prev[23] !== last_RDM_out_teste_exp[23]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[23] = RDM_out_teste_expected_prev[23];
	end
	if (
		( RDM_out_teste_expected_prev[24] !== 1'bx ) && ( RDM_out_teste_prev[24] !== RDM_out_teste_expected_prev[24] )
		&& ((RDM_out_teste_expected_prev[24] !== last_RDM_out_teste_exp[24]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[24] = RDM_out_teste_expected_prev[24];
	end
	if (
		( RDM_out_teste_expected_prev[25] !== 1'bx ) && ( RDM_out_teste_prev[25] !== RDM_out_teste_expected_prev[25] )
		&& ((RDM_out_teste_expected_prev[25] !== last_RDM_out_teste_exp[25]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[25] = RDM_out_teste_expected_prev[25];
	end
	if (
		( RDM_out_teste_expected_prev[26] !== 1'bx ) && ( RDM_out_teste_prev[26] !== RDM_out_teste_expected_prev[26] )
		&& ((RDM_out_teste_expected_prev[26] !== last_RDM_out_teste_exp[26]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[26] = RDM_out_teste_expected_prev[26];
	end
	if (
		( RDM_out_teste_expected_prev[27] !== 1'bx ) && ( RDM_out_teste_prev[27] !== RDM_out_teste_expected_prev[27] )
		&& ((RDM_out_teste_expected_prev[27] !== last_RDM_out_teste_exp[27]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[27] = RDM_out_teste_expected_prev[27];
	end
	if (
		( RDM_out_teste_expected_prev[28] !== 1'bx ) && ( RDM_out_teste_prev[28] !== RDM_out_teste_expected_prev[28] )
		&& ((RDM_out_teste_expected_prev[28] !== last_RDM_out_teste_exp[28]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[28] = RDM_out_teste_expected_prev[28];
	end
	if (
		( RDM_out_teste_expected_prev[29] !== 1'bx ) && ( RDM_out_teste_prev[29] !== RDM_out_teste_expected_prev[29] )
		&& ((RDM_out_teste_expected_prev[29] !== last_RDM_out_teste_exp[29]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[29] = RDM_out_teste_expected_prev[29];
	end
	if (
		( RDM_out_teste_expected_prev[30] !== 1'bx ) && ( RDM_out_teste_prev[30] !== RDM_out_teste_expected_prev[30] )
		&& ((RDM_out_teste_expected_prev[30] !== last_RDM_out_teste_exp[30]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[30] = RDM_out_teste_expected_prev[30];
	end
	if (
		( RDM_out_teste_expected_prev[31] !== 1'bx ) && ( RDM_out_teste_prev[31] !== RDM_out_teste_expected_prev[31] )
		&& ((RDM_out_teste_expected_prev[31] !== last_RDM_out_teste_exp[31]) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RDM_out_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RDM_out_teste_expected_prev);
		$display ("     Real value = %b", RDM_out_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_RDM_out_teste_exp[31] = RDM_out_teste_expected_prev[31];
	end
	if (
		( REg_Write3_5_expected_prev[0] !== 1'bx ) && ( REg_Write3_5_prev[0] !== REg_Write3_5_expected_prev[0] )
		&& ((REg_Write3_5_expected_prev[0] !== last_REg_Write3_5_exp[0]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REg_Write3_5[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REg_Write3_5_expected_prev);
		$display ("     Real value = %b", REg_Write3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_REg_Write3_5_exp[0] = REg_Write3_5_expected_prev[0];
	end
	if (
		( REg_Write3_5_expected_prev[1] !== 1'bx ) && ( REg_Write3_5_prev[1] !== REg_Write3_5_expected_prev[1] )
		&& ((REg_Write3_5_expected_prev[1] !== last_REg_Write3_5_exp[1]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REg_Write3_5[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REg_Write3_5_expected_prev);
		$display ("     Real value = %b", REg_Write3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_REg_Write3_5_exp[1] = REg_Write3_5_expected_prev[1];
	end
	if (
		( REg_Write3_5_expected_prev[2] !== 1'bx ) && ( REg_Write3_5_prev[2] !== REg_Write3_5_expected_prev[2] )
		&& ((REg_Write3_5_expected_prev[2] !== last_REg_Write3_5_exp[2]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REg_Write3_5[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REg_Write3_5_expected_prev);
		$display ("     Real value = %b", REg_Write3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_REg_Write3_5_exp[2] = REg_Write3_5_expected_prev[2];
	end
	if (
		( REg_Write3_5_expected_prev[3] !== 1'bx ) && ( REg_Write3_5_prev[3] !== REg_Write3_5_expected_prev[3] )
		&& ((REg_Write3_5_expected_prev[3] !== last_REg_Write3_5_exp[3]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REg_Write3_5[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REg_Write3_5_expected_prev);
		$display ("     Real value = %b", REg_Write3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_REg_Write3_5_exp[3] = REg_Write3_5_expected_prev[3];
	end
	if (
		( REg_Write3_5_expected_prev[4] !== 1'bx ) && ( REg_Write3_5_prev[4] !== REg_Write3_5_expected_prev[4] )
		&& ((REg_Write3_5_expected_prev[4] !== last_REg_Write3_5_exp[4]) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REg_Write3_5[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REg_Write3_5_expected_prev);
		$display ("     Real value = %b", REg_Write3_5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_REg_Write3_5_exp[4] = REg_Write3_5_expected_prev[4];
	end
	if (
		( Reg_Write3_teste_expected_prev[0] !== 1'bx ) && ( Reg_Write3_teste_prev[0] !== Reg_Write3_teste_expected_prev[0] )
		&& ((Reg_Write3_teste_expected_prev[0] !== last_Reg_Write3_teste_exp[0]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[0] = Reg_Write3_teste_expected_prev[0];
	end
	if (
		( Reg_Write3_teste_expected_prev[1] !== 1'bx ) && ( Reg_Write3_teste_prev[1] !== Reg_Write3_teste_expected_prev[1] )
		&& ((Reg_Write3_teste_expected_prev[1] !== last_Reg_Write3_teste_exp[1]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[1] = Reg_Write3_teste_expected_prev[1];
	end
	if (
		( Reg_Write3_teste_expected_prev[2] !== 1'bx ) && ( Reg_Write3_teste_prev[2] !== Reg_Write3_teste_expected_prev[2] )
		&& ((Reg_Write3_teste_expected_prev[2] !== last_Reg_Write3_teste_exp[2]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[2] = Reg_Write3_teste_expected_prev[2];
	end
	if (
		( Reg_Write3_teste_expected_prev[3] !== 1'bx ) && ( Reg_Write3_teste_prev[3] !== Reg_Write3_teste_expected_prev[3] )
		&& ((Reg_Write3_teste_expected_prev[3] !== last_Reg_Write3_teste_exp[3]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[3] = Reg_Write3_teste_expected_prev[3];
	end
	if (
		( Reg_Write3_teste_expected_prev[4] !== 1'bx ) && ( Reg_Write3_teste_prev[4] !== Reg_Write3_teste_expected_prev[4] )
		&& ((Reg_Write3_teste_expected_prev[4] !== last_Reg_Write3_teste_exp[4]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[4] = Reg_Write3_teste_expected_prev[4];
	end
	if (
		( Reg_Write3_teste_expected_prev[5] !== 1'bx ) && ( Reg_Write3_teste_prev[5] !== Reg_Write3_teste_expected_prev[5] )
		&& ((Reg_Write3_teste_expected_prev[5] !== last_Reg_Write3_teste_exp[5]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[5] = Reg_Write3_teste_expected_prev[5];
	end
	if (
		( Reg_Write3_teste_expected_prev[6] !== 1'bx ) && ( Reg_Write3_teste_prev[6] !== Reg_Write3_teste_expected_prev[6] )
		&& ((Reg_Write3_teste_expected_prev[6] !== last_Reg_Write3_teste_exp[6]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[6] = Reg_Write3_teste_expected_prev[6];
	end
	if (
		( Reg_Write3_teste_expected_prev[7] !== 1'bx ) && ( Reg_Write3_teste_prev[7] !== Reg_Write3_teste_expected_prev[7] )
		&& ((Reg_Write3_teste_expected_prev[7] !== last_Reg_Write3_teste_exp[7]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[7] = Reg_Write3_teste_expected_prev[7];
	end
	if (
		( Reg_Write3_teste_expected_prev[8] !== 1'bx ) && ( Reg_Write3_teste_prev[8] !== Reg_Write3_teste_expected_prev[8] )
		&& ((Reg_Write3_teste_expected_prev[8] !== last_Reg_Write3_teste_exp[8]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[8] = Reg_Write3_teste_expected_prev[8];
	end
	if (
		( Reg_Write3_teste_expected_prev[9] !== 1'bx ) && ( Reg_Write3_teste_prev[9] !== Reg_Write3_teste_expected_prev[9] )
		&& ((Reg_Write3_teste_expected_prev[9] !== last_Reg_Write3_teste_exp[9]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[9] = Reg_Write3_teste_expected_prev[9];
	end
	if (
		( Reg_Write3_teste_expected_prev[10] !== 1'bx ) && ( Reg_Write3_teste_prev[10] !== Reg_Write3_teste_expected_prev[10] )
		&& ((Reg_Write3_teste_expected_prev[10] !== last_Reg_Write3_teste_exp[10]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[10] = Reg_Write3_teste_expected_prev[10];
	end
	if (
		( Reg_Write3_teste_expected_prev[11] !== 1'bx ) && ( Reg_Write3_teste_prev[11] !== Reg_Write3_teste_expected_prev[11] )
		&& ((Reg_Write3_teste_expected_prev[11] !== last_Reg_Write3_teste_exp[11]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[11] = Reg_Write3_teste_expected_prev[11];
	end
	if (
		( Reg_Write3_teste_expected_prev[12] !== 1'bx ) && ( Reg_Write3_teste_prev[12] !== Reg_Write3_teste_expected_prev[12] )
		&& ((Reg_Write3_teste_expected_prev[12] !== last_Reg_Write3_teste_exp[12]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[12] = Reg_Write3_teste_expected_prev[12];
	end
	if (
		( Reg_Write3_teste_expected_prev[13] !== 1'bx ) && ( Reg_Write3_teste_prev[13] !== Reg_Write3_teste_expected_prev[13] )
		&& ((Reg_Write3_teste_expected_prev[13] !== last_Reg_Write3_teste_exp[13]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[13] = Reg_Write3_teste_expected_prev[13];
	end
	if (
		( Reg_Write3_teste_expected_prev[14] !== 1'bx ) && ( Reg_Write3_teste_prev[14] !== Reg_Write3_teste_expected_prev[14] )
		&& ((Reg_Write3_teste_expected_prev[14] !== last_Reg_Write3_teste_exp[14]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[14] = Reg_Write3_teste_expected_prev[14];
	end
	if (
		( Reg_Write3_teste_expected_prev[15] !== 1'bx ) && ( Reg_Write3_teste_prev[15] !== Reg_Write3_teste_expected_prev[15] )
		&& ((Reg_Write3_teste_expected_prev[15] !== last_Reg_Write3_teste_exp[15]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[15] = Reg_Write3_teste_expected_prev[15];
	end
	if (
		( Reg_Write3_teste_expected_prev[16] !== 1'bx ) && ( Reg_Write3_teste_prev[16] !== Reg_Write3_teste_expected_prev[16] )
		&& ((Reg_Write3_teste_expected_prev[16] !== last_Reg_Write3_teste_exp[16]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[16] = Reg_Write3_teste_expected_prev[16];
	end
	if (
		( Reg_Write3_teste_expected_prev[17] !== 1'bx ) && ( Reg_Write3_teste_prev[17] !== Reg_Write3_teste_expected_prev[17] )
		&& ((Reg_Write3_teste_expected_prev[17] !== last_Reg_Write3_teste_exp[17]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[17] = Reg_Write3_teste_expected_prev[17];
	end
	if (
		( Reg_Write3_teste_expected_prev[18] !== 1'bx ) && ( Reg_Write3_teste_prev[18] !== Reg_Write3_teste_expected_prev[18] )
		&& ((Reg_Write3_teste_expected_prev[18] !== last_Reg_Write3_teste_exp[18]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[18] = Reg_Write3_teste_expected_prev[18];
	end
	if (
		( Reg_Write3_teste_expected_prev[19] !== 1'bx ) && ( Reg_Write3_teste_prev[19] !== Reg_Write3_teste_expected_prev[19] )
		&& ((Reg_Write3_teste_expected_prev[19] !== last_Reg_Write3_teste_exp[19]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[19] = Reg_Write3_teste_expected_prev[19];
	end
	if (
		( Reg_Write3_teste_expected_prev[20] !== 1'bx ) && ( Reg_Write3_teste_prev[20] !== Reg_Write3_teste_expected_prev[20] )
		&& ((Reg_Write3_teste_expected_prev[20] !== last_Reg_Write3_teste_exp[20]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[20] = Reg_Write3_teste_expected_prev[20];
	end
	if (
		( Reg_Write3_teste_expected_prev[21] !== 1'bx ) && ( Reg_Write3_teste_prev[21] !== Reg_Write3_teste_expected_prev[21] )
		&& ((Reg_Write3_teste_expected_prev[21] !== last_Reg_Write3_teste_exp[21]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[21] = Reg_Write3_teste_expected_prev[21];
	end
	if (
		( Reg_Write3_teste_expected_prev[22] !== 1'bx ) && ( Reg_Write3_teste_prev[22] !== Reg_Write3_teste_expected_prev[22] )
		&& ((Reg_Write3_teste_expected_prev[22] !== last_Reg_Write3_teste_exp[22]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[22] = Reg_Write3_teste_expected_prev[22];
	end
	if (
		( Reg_Write3_teste_expected_prev[23] !== 1'bx ) && ( Reg_Write3_teste_prev[23] !== Reg_Write3_teste_expected_prev[23] )
		&& ((Reg_Write3_teste_expected_prev[23] !== last_Reg_Write3_teste_exp[23]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[23] = Reg_Write3_teste_expected_prev[23];
	end
	if (
		( Reg_Write3_teste_expected_prev[24] !== 1'bx ) && ( Reg_Write3_teste_prev[24] !== Reg_Write3_teste_expected_prev[24] )
		&& ((Reg_Write3_teste_expected_prev[24] !== last_Reg_Write3_teste_exp[24]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[24] = Reg_Write3_teste_expected_prev[24];
	end
	if (
		( Reg_Write3_teste_expected_prev[25] !== 1'bx ) && ( Reg_Write3_teste_prev[25] !== Reg_Write3_teste_expected_prev[25] )
		&& ((Reg_Write3_teste_expected_prev[25] !== last_Reg_Write3_teste_exp[25]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[25] = Reg_Write3_teste_expected_prev[25];
	end
	if (
		( Reg_Write3_teste_expected_prev[26] !== 1'bx ) && ( Reg_Write3_teste_prev[26] !== Reg_Write3_teste_expected_prev[26] )
		&& ((Reg_Write3_teste_expected_prev[26] !== last_Reg_Write3_teste_exp[26]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[26] = Reg_Write3_teste_expected_prev[26];
	end
	if (
		( Reg_Write3_teste_expected_prev[27] !== 1'bx ) && ( Reg_Write3_teste_prev[27] !== Reg_Write3_teste_expected_prev[27] )
		&& ((Reg_Write3_teste_expected_prev[27] !== last_Reg_Write3_teste_exp[27]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[27] = Reg_Write3_teste_expected_prev[27];
	end
	if (
		( Reg_Write3_teste_expected_prev[28] !== 1'bx ) && ( Reg_Write3_teste_prev[28] !== Reg_Write3_teste_expected_prev[28] )
		&& ((Reg_Write3_teste_expected_prev[28] !== last_Reg_Write3_teste_exp[28]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[28] = Reg_Write3_teste_expected_prev[28];
	end
	if (
		( Reg_Write3_teste_expected_prev[29] !== 1'bx ) && ( Reg_Write3_teste_prev[29] !== Reg_Write3_teste_expected_prev[29] )
		&& ((Reg_Write3_teste_expected_prev[29] !== last_Reg_Write3_teste_exp[29]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[29] = Reg_Write3_teste_expected_prev[29];
	end
	if (
		( Reg_Write3_teste_expected_prev[30] !== 1'bx ) && ( Reg_Write3_teste_prev[30] !== Reg_Write3_teste_expected_prev[30] )
		&& ((Reg_Write3_teste_expected_prev[30] !== last_Reg_Write3_teste_exp[30]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[30] = Reg_Write3_teste_expected_prev[30];
	end
	if (
		( Reg_Write3_teste_expected_prev[31] !== 1'bx ) && ( Reg_Write3_teste_prev[31] !== Reg_Write3_teste_expected_prev[31] )
		&& ((Reg_Write3_teste_expected_prev[31] !== last_Reg_Write3_teste_exp[31]) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Reg_Write3_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Reg_Write3_teste_expected_prev);
		$display ("     Real value = %b", Reg_Write3_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_Reg_Write3_teste_exp[31] = Reg_Write3_teste_expected_prev[31];
	end
	if (
		( regDST_test_expected_prev !== 1'bx ) && ( regDST_test_prev !== regDST_test_expected_prev )
		&& ((regDST_test_expected_prev !== last_regDST_test_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port regDST_test :: @time = %t",  $realtime);
		$display ("     Expected value = %b", regDST_test_expected_prev);
		$display ("     Real value = %b", regDST_test_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_regDST_test_exp = regDST_test_expected_prev;
	end
	if (
		( RS_teste_expected_prev[0] !== 1'bx ) && ( RS_teste_prev[0] !== RS_teste_expected_prev[0] )
		&& ((RS_teste_expected_prev[0] !== last_RS_teste_exp[0]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_teste_expected_prev);
		$display ("     Real value = %b", RS_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RS_teste_exp[0] = RS_teste_expected_prev[0];
	end
	if (
		( RS_teste_expected_prev[1] !== 1'bx ) && ( RS_teste_prev[1] !== RS_teste_expected_prev[1] )
		&& ((RS_teste_expected_prev[1] !== last_RS_teste_exp[1]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_teste_expected_prev);
		$display ("     Real value = %b", RS_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RS_teste_exp[1] = RS_teste_expected_prev[1];
	end
	if (
		( RS_teste_expected_prev[2] !== 1'bx ) && ( RS_teste_prev[2] !== RS_teste_expected_prev[2] )
		&& ((RS_teste_expected_prev[2] !== last_RS_teste_exp[2]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_teste_expected_prev);
		$display ("     Real value = %b", RS_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RS_teste_exp[2] = RS_teste_expected_prev[2];
	end
	if (
		( RS_teste_expected_prev[3] !== 1'bx ) && ( RS_teste_prev[3] !== RS_teste_expected_prev[3] )
		&& ((RS_teste_expected_prev[3] !== last_RS_teste_exp[3]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_teste_expected_prev);
		$display ("     Real value = %b", RS_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RS_teste_exp[3] = RS_teste_expected_prev[3];
	end
	if (
		( RS_teste_expected_prev[4] !== 1'bx ) && ( RS_teste_prev[4] !== RS_teste_expected_prev[4] )
		&& ((RS_teste_expected_prev[4] !== last_RS_teste_exp[4]) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RS_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RS_teste_expected_prev);
		$display ("     Real value = %b", RS_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_RS_teste_exp[4] = RS_teste_expected_prev[4];
	end
	if (
		( RT_teste_expected_prev[0] !== 1'bx ) && ( RT_teste_prev[0] !== RT_teste_expected_prev[0] )
		&& ((RT_teste_expected_prev[0] !== last_RT_teste_exp[0]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_teste_expected_prev);
		$display ("     Real value = %b", RT_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RT_teste_exp[0] = RT_teste_expected_prev[0];
	end
	if (
		( RT_teste_expected_prev[1] !== 1'bx ) && ( RT_teste_prev[1] !== RT_teste_expected_prev[1] )
		&& ((RT_teste_expected_prev[1] !== last_RT_teste_exp[1]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_teste_expected_prev);
		$display ("     Real value = %b", RT_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RT_teste_exp[1] = RT_teste_expected_prev[1];
	end
	if (
		( RT_teste_expected_prev[2] !== 1'bx ) && ( RT_teste_prev[2] !== RT_teste_expected_prev[2] )
		&& ((RT_teste_expected_prev[2] !== last_RT_teste_exp[2]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_teste_expected_prev);
		$display ("     Real value = %b", RT_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RT_teste_exp[2] = RT_teste_expected_prev[2];
	end
	if (
		( RT_teste_expected_prev[3] !== 1'bx ) && ( RT_teste_prev[3] !== RT_teste_expected_prev[3] )
		&& ((RT_teste_expected_prev[3] !== last_RT_teste_exp[3]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_teste_expected_prev);
		$display ("     Real value = %b", RT_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RT_teste_exp[3] = RT_teste_expected_prev[3];
	end
	if (
		( RT_teste_expected_prev[4] !== 1'bx ) && ( RT_teste_prev[4] !== RT_teste_expected_prev[4] )
		&& ((RT_teste_expected_prev[4] !== last_RT_teste_exp[4]) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RT_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RT_teste_expected_prev);
		$display ("     Real value = %b", RT_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_RT_teste_exp[4] = RT_teste_expected_prev[4];
	end
	if (
		( saida_alu_teste_expected_prev[0] !== 1'bx ) && ( saida_alu_teste_prev[0] !== saida_alu_teste_expected_prev[0] )
		&& ((saida_alu_teste_expected_prev[0] !== last_saida_alu_teste_exp[0]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[0] = saida_alu_teste_expected_prev[0];
	end
	if (
		( saida_alu_teste_expected_prev[1] !== 1'bx ) && ( saida_alu_teste_prev[1] !== saida_alu_teste_expected_prev[1] )
		&& ((saida_alu_teste_expected_prev[1] !== last_saida_alu_teste_exp[1]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[1] = saida_alu_teste_expected_prev[1];
	end
	if (
		( saida_alu_teste_expected_prev[2] !== 1'bx ) && ( saida_alu_teste_prev[2] !== saida_alu_teste_expected_prev[2] )
		&& ((saida_alu_teste_expected_prev[2] !== last_saida_alu_teste_exp[2]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[2] = saida_alu_teste_expected_prev[2];
	end
	if (
		( saida_alu_teste_expected_prev[3] !== 1'bx ) && ( saida_alu_teste_prev[3] !== saida_alu_teste_expected_prev[3] )
		&& ((saida_alu_teste_expected_prev[3] !== last_saida_alu_teste_exp[3]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[3] = saida_alu_teste_expected_prev[3];
	end
	if (
		( saida_alu_teste_expected_prev[4] !== 1'bx ) && ( saida_alu_teste_prev[4] !== saida_alu_teste_expected_prev[4] )
		&& ((saida_alu_teste_expected_prev[4] !== last_saida_alu_teste_exp[4]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[4] = saida_alu_teste_expected_prev[4];
	end
	if (
		( saida_alu_teste_expected_prev[5] !== 1'bx ) && ( saida_alu_teste_prev[5] !== saida_alu_teste_expected_prev[5] )
		&& ((saida_alu_teste_expected_prev[5] !== last_saida_alu_teste_exp[5]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[5] = saida_alu_teste_expected_prev[5];
	end
	if (
		( saida_alu_teste_expected_prev[6] !== 1'bx ) && ( saida_alu_teste_prev[6] !== saida_alu_teste_expected_prev[6] )
		&& ((saida_alu_teste_expected_prev[6] !== last_saida_alu_teste_exp[6]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[6] = saida_alu_teste_expected_prev[6];
	end
	if (
		( saida_alu_teste_expected_prev[7] !== 1'bx ) && ( saida_alu_teste_prev[7] !== saida_alu_teste_expected_prev[7] )
		&& ((saida_alu_teste_expected_prev[7] !== last_saida_alu_teste_exp[7]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[7] = saida_alu_teste_expected_prev[7];
	end
	if (
		( saida_alu_teste_expected_prev[8] !== 1'bx ) && ( saida_alu_teste_prev[8] !== saida_alu_teste_expected_prev[8] )
		&& ((saida_alu_teste_expected_prev[8] !== last_saida_alu_teste_exp[8]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[8] = saida_alu_teste_expected_prev[8];
	end
	if (
		( saida_alu_teste_expected_prev[9] !== 1'bx ) && ( saida_alu_teste_prev[9] !== saida_alu_teste_expected_prev[9] )
		&& ((saida_alu_teste_expected_prev[9] !== last_saida_alu_teste_exp[9]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[9] = saida_alu_teste_expected_prev[9];
	end
	if (
		( saida_alu_teste_expected_prev[10] !== 1'bx ) && ( saida_alu_teste_prev[10] !== saida_alu_teste_expected_prev[10] )
		&& ((saida_alu_teste_expected_prev[10] !== last_saida_alu_teste_exp[10]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[10] = saida_alu_teste_expected_prev[10];
	end
	if (
		( saida_alu_teste_expected_prev[11] !== 1'bx ) && ( saida_alu_teste_prev[11] !== saida_alu_teste_expected_prev[11] )
		&& ((saida_alu_teste_expected_prev[11] !== last_saida_alu_teste_exp[11]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[11] = saida_alu_teste_expected_prev[11];
	end
	if (
		( saida_alu_teste_expected_prev[12] !== 1'bx ) && ( saida_alu_teste_prev[12] !== saida_alu_teste_expected_prev[12] )
		&& ((saida_alu_teste_expected_prev[12] !== last_saida_alu_teste_exp[12]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[12] = saida_alu_teste_expected_prev[12];
	end
	if (
		( saida_alu_teste_expected_prev[13] !== 1'bx ) && ( saida_alu_teste_prev[13] !== saida_alu_teste_expected_prev[13] )
		&& ((saida_alu_teste_expected_prev[13] !== last_saida_alu_teste_exp[13]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[13] = saida_alu_teste_expected_prev[13];
	end
	if (
		( saida_alu_teste_expected_prev[14] !== 1'bx ) && ( saida_alu_teste_prev[14] !== saida_alu_teste_expected_prev[14] )
		&& ((saida_alu_teste_expected_prev[14] !== last_saida_alu_teste_exp[14]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[14] = saida_alu_teste_expected_prev[14];
	end
	if (
		( saida_alu_teste_expected_prev[15] !== 1'bx ) && ( saida_alu_teste_prev[15] !== saida_alu_teste_expected_prev[15] )
		&& ((saida_alu_teste_expected_prev[15] !== last_saida_alu_teste_exp[15]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[15] = saida_alu_teste_expected_prev[15];
	end
	if (
		( saida_alu_teste_expected_prev[16] !== 1'bx ) && ( saida_alu_teste_prev[16] !== saida_alu_teste_expected_prev[16] )
		&& ((saida_alu_teste_expected_prev[16] !== last_saida_alu_teste_exp[16]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[16] = saida_alu_teste_expected_prev[16];
	end
	if (
		( saida_alu_teste_expected_prev[17] !== 1'bx ) && ( saida_alu_teste_prev[17] !== saida_alu_teste_expected_prev[17] )
		&& ((saida_alu_teste_expected_prev[17] !== last_saida_alu_teste_exp[17]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[17] = saida_alu_teste_expected_prev[17];
	end
	if (
		( saida_alu_teste_expected_prev[18] !== 1'bx ) && ( saida_alu_teste_prev[18] !== saida_alu_teste_expected_prev[18] )
		&& ((saida_alu_teste_expected_prev[18] !== last_saida_alu_teste_exp[18]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[18] = saida_alu_teste_expected_prev[18];
	end
	if (
		( saida_alu_teste_expected_prev[19] !== 1'bx ) && ( saida_alu_teste_prev[19] !== saida_alu_teste_expected_prev[19] )
		&& ((saida_alu_teste_expected_prev[19] !== last_saida_alu_teste_exp[19]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[19] = saida_alu_teste_expected_prev[19];
	end
	if (
		( saida_alu_teste_expected_prev[20] !== 1'bx ) && ( saida_alu_teste_prev[20] !== saida_alu_teste_expected_prev[20] )
		&& ((saida_alu_teste_expected_prev[20] !== last_saida_alu_teste_exp[20]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[20] = saida_alu_teste_expected_prev[20];
	end
	if (
		( saida_alu_teste_expected_prev[21] !== 1'bx ) && ( saida_alu_teste_prev[21] !== saida_alu_teste_expected_prev[21] )
		&& ((saida_alu_teste_expected_prev[21] !== last_saida_alu_teste_exp[21]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[21] = saida_alu_teste_expected_prev[21];
	end
	if (
		( saida_alu_teste_expected_prev[22] !== 1'bx ) && ( saida_alu_teste_prev[22] !== saida_alu_teste_expected_prev[22] )
		&& ((saida_alu_teste_expected_prev[22] !== last_saida_alu_teste_exp[22]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[22] = saida_alu_teste_expected_prev[22];
	end
	if (
		( saida_alu_teste_expected_prev[23] !== 1'bx ) && ( saida_alu_teste_prev[23] !== saida_alu_teste_expected_prev[23] )
		&& ((saida_alu_teste_expected_prev[23] !== last_saida_alu_teste_exp[23]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[23] = saida_alu_teste_expected_prev[23];
	end
	if (
		( saida_alu_teste_expected_prev[24] !== 1'bx ) && ( saida_alu_teste_prev[24] !== saida_alu_teste_expected_prev[24] )
		&& ((saida_alu_teste_expected_prev[24] !== last_saida_alu_teste_exp[24]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[24] = saida_alu_teste_expected_prev[24];
	end
	if (
		( saida_alu_teste_expected_prev[25] !== 1'bx ) && ( saida_alu_teste_prev[25] !== saida_alu_teste_expected_prev[25] )
		&& ((saida_alu_teste_expected_prev[25] !== last_saida_alu_teste_exp[25]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[25] = saida_alu_teste_expected_prev[25];
	end
	if (
		( saida_alu_teste_expected_prev[26] !== 1'bx ) && ( saida_alu_teste_prev[26] !== saida_alu_teste_expected_prev[26] )
		&& ((saida_alu_teste_expected_prev[26] !== last_saida_alu_teste_exp[26]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[26] = saida_alu_teste_expected_prev[26];
	end
	if (
		( saida_alu_teste_expected_prev[27] !== 1'bx ) && ( saida_alu_teste_prev[27] !== saida_alu_teste_expected_prev[27] )
		&& ((saida_alu_teste_expected_prev[27] !== last_saida_alu_teste_exp[27]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[27] = saida_alu_teste_expected_prev[27];
	end
	if (
		( saida_alu_teste_expected_prev[28] !== 1'bx ) && ( saida_alu_teste_prev[28] !== saida_alu_teste_expected_prev[28] )
		&& ((saida_alu_teste_expected_prev[28] !== last_saida_alu_teste_exp[28]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[28] = saida_alu_teste_expected_prev[28];
	end
	if (
		( saida_alu_teste_expected_prev[29] !== 1'bx ) && ( saida_alu_teste_prev[29] !== saida_alu_teste_expected_prev[29] )
		&& ((saida_alu_teste_expected_prev[29] !== last_saida_alu_teste_exp[29]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[29] = saida_alu_teste_expected_prev[29];
	end
	if (
		( saida_alu_teste_expected_prev[30] !== 1'bx ) && ( saida_alu_teste_prev[30] !== saida_alu_teste_expected_prev[30] )
		&& ((saida_alu_teste_expected_prev[30] !== last_saida_alu_teste_exp[30]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[30] = saida_alu_teste_expected_prev[30];
	end
	if (
		( saida_alu_teste_expected_prev[31] !== 1'bx ) && ( saida_alu_teste_prev[31] !== saida_alu_teste_expected_prev[31] )
		&& ((saida_alu_teste_expected_prev[31] !== last_saida_alu_teste_exp[31]) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port saida_alu_teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", saida_alu_teste_expected_prev);
		$display ("     Real value = %b", saida_alu_teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_saida_alu_teste_exp[31] = saida_alu_teste_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#30000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MIPS_Multiciclo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
// wires                                               
wire [31:0] A_teste;
wire [31:0] address;
wire [31:0] B_teste;
wire [31:0] datA_Write2_teste;
wire EnablePC_teste;
wire [31:0] Endereco_MEM_teste;
wire EscreveReg_teste;
wire [15:0] imm;
wire [31:0] instruction;
wire is_bgez_teste;
wire louD_teste;
wire MemparaReg_teste;
wire [3:0] op_alu_test;
wire [1:0] OrigBAlu_teste;
wire [4:0] RD_teste;
wire [31:0] RDM_out_teste;
wire [4:0] REg_Write3_5;
wire [31:0] Reg_Write3_teste;
wire regDST_test;
wire [4:0] RS_teste;
wire [4:0] RT_teste;
wire [31:0] saida_alu_teste;

wire sampler;                             

// assign statements (if any)                          
MIPS_Multiciclo i1 (
// port map - connection between master ports and signals/registers   
	.A_teste(A_teste),
	.address(address),
	.B_teste(B_teste),
	.clk(clk),
	.datA_Write2_teste(datA_Write2_teste),
	.EnablePC_teste(EnablePC_teste),
	.Endereco_MEM_teste(Endereco_MEM_teste),
	.EscreveReg_teste(EscreveReg_teste),
	.imm(imm),
	.instruction(instruction),
	.is_bgez_teste(is_bgez_teste),
	.louD_teste(louD_teste),
	.MemparaReg_teste(MemparaReg_teste),
	.op_alu_test(op_alu_test),
	.OrigBAlu_teste(OrigBAlu_teste),
	.RD_teste(RD_teste),
	.RDM_out_teste(RDM_out_teste),
	.REg_Write3_5(REg_Write3_5),
	.Reg_Write3_teste(Reg_Write3_teste),
	.regDST_test(regDST_test),
	.reset(reset),
	.RS_teste(RS_teste),
	.RT_teste(RT_teste),
	.saida_alu_teste(saida_alu_teste)
);

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

MIPS_Multiciclo_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.sampler_tx(sampler)
);

MIPS_Multiciclo_vlg_check_tst tb_out(
	.A_teste(A_teste),
	.address(address),
	.B_teste(B_teste),
	.datA_Write2_teste(datA_Write2_teste),
	.EnablePC_teste(EnablePC_teste),
	.Endereco_MEM_teste(Endereco_MEM_teste),
	.EscreveReg_teste(EscreveReg_teste),
	.imm(imm),
	.instruction(instruction),
	.is_bgez_teste(is_bgez_teste),
	.louD_teste(louD_teste),
	.MemparaReg_teste(MemparaReg_teste),
	.op_alu_test(op_alu_test),
	.OrigBAlu_teste(OrigBAlu_teste),
	.RD_teste(RD_teste),
	.RDM_out_teste(RDM_out_teste),
	.REg_Write3_5(REg_Write3_5),
	.Reg_Write3_teste(Reg_Write3_teste),
	.regDST_test(regDST_test),
	.RS_teste(RS_teste),
	.RT_teste(RT_teste),
	.saida_alu_teste(saida_alu_teste),
	.sampler_rx(sampler)
);
endmodule

