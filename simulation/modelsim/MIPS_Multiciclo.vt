// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/11/2015 10:34:31"
                                                                                
// Verilog Test Bench template for design : MIPS_Multiciclo
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module MIPS_Multiciclo_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg reset;
// wires                                               
wire [31:0]  A_teste;
wire [31:0]  address;
wire [31:0]  B_teste;
wire [31:0]  datA_Write2_teste;
wire [31:0]  Endereco_MEM_teste;
wire EscreveReg_teste;
wire [15:0]  imm;
wire [31:0]  instruction;
wire louD_teste;
wire MemparaReg_teste;
wire [1:0]  OrigBAlu_teste;
wire [4:0]  RD_teste;
wire [31:0]  RDM_out_teste;
wire [4:0]  REg_Write3_5;
wire [31:0]  Reg_Write3_teste;
wire regDST_test;
wire [4:0]  RS_teste;
wire [4:0]  RT_teste;
wire [31:0]  saida_alu_teste;

// assign statements (if any)                          
MIPS_Multiciclo i1 (
// port map - connection between master ports and signals/registers   
	.A_teste(A_teste),
	.address(address),
	.B_teste(B_teste),
	.clk(clk),
	.datA_Write2_teste(datA_Write2_teste),
	.Endereco_MEM_teste(Endereco_MEM_teste),
	.EscreveReg_teste(EscreveReg_teste),
	.imm(imm),
	.instruction(instruction),
	.louD_teste(louD_teste),
	.MemparaReg_teste(MemparaReg_teste),
	.OrigBAlu_teste(OrigBAlu_teste),
	.RD_teste(RD_teste),
	.RDM_out_teste(RDM_out_teste),
	.REg_Write3_5(REg_Write3_5),
	.Reg_Write3_teste(Reg_Write3_teste),
	.regDST_test(regDST_test),
	.reset(reset),
	.RS_teste(RS_teste),
	.RT_teste(RT_teste),
	.saida_alu_teste(saida_alu_teste)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

